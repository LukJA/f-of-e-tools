
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.17+9 (git sha1 3f8fb28cd, gcc 12.1.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)


-- Executing script file `../../../yscripts/sail.ys' --

1. Executing Verilog-2005 frontend: verilog/adder.v
Parsing Verilog input from `verilog/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: verilog/cpu.v
Parsing Verilog input from `verilog/cpu.v' to AST representation.
Generating RTLIL representation for module `\cpu'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: verilog/mux2to1.v
Parsing Verilog input from `verilog/mux2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: verilog/alu_control.v
Parsing Verilog input from `verilog/alu_control.v' to AST representation.
Generating RTLIL representation for module `\ALUControl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: verilog/pipeline_registers.v
Parsing Verilog input from `verilog/pipeline_registers.v' to AST representation.
Generating RTLIL representation for module `\if_id'.
Generating RTLIL representation for module `\id_ex'.
Generating RTLIL representation for module `\ex_mem'.
Generating RTLIL representation for module `\mem_wb'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: verilog/alu.v
Parsing Verilog input from `verilog/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Note: Assuming pure combinatorial block at verilog/alu.v:78.2-145.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at verilog/alu.v:147.2-158.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: verilog/program_counter.v
Parsing Verilog input from `verilog/program_counter.v' to AST representation.
Generating RTLIL representation for module `\program_counter'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: verilog/branch_decide.v
Parsing Verilog input from `verilog/branch_decide.v' to AST representation.
Generating RTLIL representation for module `\branch_decision'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: verilog/forwarding_unit.v
Parsing Verilog input from `verilog/forwarding_unit.v' to AST representation.
Generating RTLIL representation for module `\ForwardingUnit'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: verilog/branch_predictor.v
Parsing Verilog input from `verilog/branch_predictor.v' to AST representation.
Generating RTLIL representation for module `\branch_predictor'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: verilog/imm_gen.v
Parsing Verilog input from `verilog/imm_gen.v' to AST representation.
Generating RTLIL representation for module `\imm_gen'.
Note: Assuming pure combinatorial block at verilog/imm_gen.v:54.2-72.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: verilog/control_unit.v
Parsing Verilog input from `verilog/control_unit.v' to AST representation.
Generating RTLIL representation for module `\control'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: verilog/instruction_mem.v
Parsing Verilog input from `verilog/instruction_mem.v' to AST representation.
Generating RTLIL representation for module `\instruction_memory'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: verilog/data_mem.v
Parsing Verilog input from `verilog/data_mem.v' to AST representation.
Generating RTLIL representation for module `\data_mem'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: verilog/register_file.v
Parsing Verilog input from `verilog/register_file.v' to AST representation.
Generating RTLIL representation for module `\regfile'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: verilog/CSR.v
Parsing Verilog input from `verilog/CSR.v' to AST representation.
Generating RTLIL representation for module `\csr_file'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: verilog/dataMem_mask_gen.v
Parsing Verilog input from `verilog/dataMem_mask_gen.v' to AST representation.
Generating RTLIL representation for module `\sign_mask_gen'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: toplevel.v
Parsing Verilog input from `toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

19. Executing SYNTH_ICE40 pass.

19.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

19.2. Executing HIERARCHY pass (managing design hierarchy).

19.2.1. Finding top of design hierarchy..
root of   2 design levels: top                 
root of   0 design levels: sign_mask_gen       
root of   0 design levels: csr_file            
root of   0 design levels: regfile             
root of   0 design levels: data_mem            
root of   0 design levels: instruction_memory  
root of   0 design levels: control             
root of   0 design levels: imm_gen             
root of   0 design levels: branch_predictor    
root of   0 design levels: ForwardingUnit      
root of   0 design levels: branch_decision     
root of   0 design levels: program_counter     
root of   0 design levels: alu                 
root of   0 design levels: mem_wb              
root of   0 design levels: ex_mem              
root of   0 design levels: id_ex               
root of   0 design levels: if_id               
root of   0 design levels: ALUControl          
root of   0 design levels: mux2to1             
root of   1 design levels: cpu                 
root of   0 design levels: adder               
Automatically selected top as design top module.

19.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter

19.2.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \mux2to1
Used module:         \branch_predictor
Used module:         \ForwardingUnit
Used module:         \mem_wb
Used module:         \branch_decision
Used module:         \ex_mem
Used module:         \alu
Used module:         \adder
Used module:         \id_ex
Used module:         \csr_file
Used module:         \sign_mask_gen
Used module:         \ALUControl
Used module:         \imm_gen
Used module:         \regfile
Used module:         \control
Used module:         \if_id
Used module:         \program_counter
Removed 0 unused modules.

19.3. Executing PROC pass (convert processes to netlists).

19.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `instruction_memory.$proc$verilog/instruction_mem.v:0$163'.
Cleaned up 0 empty switches.

19.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$524 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$513 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$510 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$507 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$504 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$501 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$486 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$475 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$472 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$469 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$466 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$463 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$verilog/dataMem_mask_gen.v:58$286 in module sign_mask_gen.
Marked 1 switch rules as full_case in process $proc$verilog/CSR.v:57$278 in module csr_file.
Marked 1 switch rules as full_case in process $proc$verilog/register_file.v:95$252 in module regfile.
Marked 2 switch rules as full_case in process $proc$verilog/data_mem.v:240$233 in module data_mem.
Marked 1 switch rules as full_case in process $proc$verilog/imm_gen.v:54$102 in module imm_gen.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:147$32 in module alu.
Marked 1 switch rules as full_case in process $proc$verilog/alu.v:78$18 in module alu.
Removed 5 dead cases from process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Marked 10 switch rules as full_case in process $proc$verilog/alu_control.v:82$8 in module ALUControl.
Removed a total of 5 dead cases.

19.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 66 assignments to connections.

19.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$534'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$530'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$523'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$519'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$512'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$509'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$506'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$503'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$500'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$498'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$496'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$492'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$485'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$481'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$474'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$471'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$468'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$465'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$462'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$460'.
  Set init value: \Q = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:0$249'.
  Set init value: \clk_stall = 1'0
Found init rule in `\data_mem.$proc$verilog/data_mem.v:60$248'.
  Set init value: \state = 0
Found init rule in `\imm_gen.$proc$verilog/imm_gen.v:0$103'.
  Set init value: \imm = 0
Found init rule in `\branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
  Set init value: \s = 2'00
  Set init value: \branch_mem_sig_reg = 1'0
Found init rule in `\program_counter.$proc$verilog/program_counter.v:0$42'.
  Set init value: \outAddr = 0
Found init rule in `\alu.$proc$verilog/alu.v:0$40'.
  Set init value: \ALUOut = 0
  Set init value: \Branch_Enable = 1'0
Found init rule in `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
  Set init value: \data_out = 117'000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
  Set init value: \data_out = 155'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
  Set init value: \data_out = 178'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
  Set init value: \data_out = 64'0000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\ALUControl.$proc$verilog/alu_control.v:0$9'.
  Set init value: \ALUCtl = 7'0000000

19.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$510'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$504'.
Found async reset \S in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493'.
Found async reset \R in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482'.
Found async reset \S in `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$472'.
Found async reset \R in `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$466'.

19.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~40 debug messages>

19.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$534'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$530'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$524'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$523'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$519'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$513'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$512'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$510'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$509'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$507'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$506'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$504'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$503'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$501'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$500'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$499'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$498'.
Creating decoders for process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$497'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$496'.
Creating decoders for process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$492'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$486'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$485'.
Creating decoders for process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$481'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$475'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$474'.
Creating decoders for process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$472'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$471'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$469'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$468'.
Creating decoders for process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$466'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$465'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$463'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$462'.
Creating decoders for process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$461'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$460'.
Creating decoders for process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$459'.
Creating decoders for process `\top.$proc$toplevel.v:52$290'.
Creating decoders for process `\top.$proc$toplevel.v:51$289'.
Creating decoders for process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$286'.
     1/1: $1\mask[2:0]
Creating decoders for process `\csr_file.$proc$verilog/CSR.v:57$278'.
     1/3: $1$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$284
     2/3: $1$memwr$\csr_file$verilog/CSR.v:59$277_DATA[31:0]$283
     3/3: $1$memwr$\csr_file$verilog/CSR.v:59$277_ADDR[11:0]$282
Creating decoders for process `\regfile.$proc$verilog/register_file.v:0$275'.
Creating decoders for process `\regfile.$proc$verilog/register_file.v:95$252'.
     1/3: $1$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$261
     2/3: $1$memwr$\regfile$verilog/register_file.v:97$251_DATA[31:0]$260
     3/3: $1$memwr$\regfile$verilog/register_file.v:97$251_ADDR[4:0]$259
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:0$249'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:60$248'.
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:240$233'.
     1/12: $1$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$239
     2/12: $1$memwr$\data_block$verilog/data_mem.v:283$164_DATA[31:0]$238
     3/12: $1$memwr$\data_block$verilog/data_mem.v:283$164_ADDR[31:0]$237
     4/12: $0\sign_mask_buf[3:0]
     5/12: $0\addr_buf[31:0]
     6/12: $0\write_data_buffer[31:0]
     7/12: $0\memwrite_buf[0:0]
     8/12: $0\memread_buf[0:0]
     9/12: $0\word_buf[31:0]
    10/12: $0\state[31:0]
    11/12: $0\clk_stall[0:0]
    12/12: $0\read_data[31:0]
Creating decoders for process `\data_mem.$proc$verilog/data_mem.v:231$229'.
     1/1: $0\led_reg[31:0]
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:0$103'.
Creating decoders for process `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
     1/1: $1\imm[31:0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
     1/2: $0\s[1:0] [1]
     2/2: $0\s[1:0] [0]
Creating decoders for process `\branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:0$42'.
Creating decoders for process `\program_counter.$proc$verilog/program_counter.v:65$41'.
Creating decoders for process `\alu.$proc$verilog/alu.v:0$40'.
Creating decoders for process `\alu.$proc$verilog/alu.v:147$32'.
     1/1: $1\Branch_Enable[0:0]
Creating decoders for process `\alu.$proc$verilog/alu.v:78$18'.
     1/1: $1\ALUOut[31:0]
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Creating decoders for process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Creating decoders for process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Creating decoders for process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:0$11'.
Creating decoders for process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:0$9'.
Creating decoders for process `\ALUControl.$proc$verilog/alu_control.v:82$8'.
     1/10: $10\ALUCtl[6:0]
     2/10: $9\ALUCtl[6:0]
     3/10: $8\ALUCtl[6:0]
     4/10: $7\ALUCtl[6:0]
     5/10: $6\ALUCtl[6:0]
     6/10: $5\ALUCtl[6:0]
     7/10: $4\ALUCtl[6:0]
     8/10: $3\ALUCtl[6:0]
     9/10: $2\ALUCtl[6:0]
    10/10: $1\ALUCtl[6:0]

19.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\CLKHF_POWERUP' from process `\top.$proc$toplevel.v:52$290'.
No latch inferred for signal `\top.\ENCLKHF' from process `\top.$proc$toplevel.v:51$289'.
No latch inferred for signal `\sign_mask_gen.\mask' from process `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$286'.
No latch inferred for signal `\regfile.$memwr$\regfile$verilog/register_file.v:92$250_EN' from process `\regfile.$proc$verilog/register_file.v:0$275'.
No latch inferred for signal `\imm_gen.\imm' from process `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [0]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [1]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [2]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [3]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [4]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [5]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [6]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [7]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [8]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [9]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [10]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [11]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [12]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [13]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [14]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [15]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [16]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [17]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [18]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [19]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [20]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [21]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [22]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [23]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [24]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [25]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [26]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [27]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [28]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [29]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [30]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
Removing init bit 1'0 for non-memory siginal `\imm_gen.\imm [31]` in process `\imm_gen.$proc$verilog/imm_gen.v:54$102`.
No latch inferred for signal `\alu.\Branch_Enable' from process `\alu.$proc$verilog/alu.v:147$32'.
Removing init bit 1'0 for non-memory siginal `\alu.\Branch_Enable` in process `\alu.$proc$verilog/alu.v:147$32`.
No latch inferred for signal `\alu.\ALUOut' from process `\alu.$proc$verilog/alu.v:78$18'.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [0]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [1]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [2]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [3]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [4]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [5]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [6]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [7]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [8]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [9]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [10]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [11]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [12]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [13]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [14]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [15]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [16]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [17]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [18]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [19]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [20]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [21]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [22]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [23]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [24]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [25]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [26]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [27]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [28]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [29]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [30]` in process `\alu.$proc$verilog/alu.v:78$18`.
Removing init bit 1'0 for non-memory siginal `\alu.\ALUOut [31]` in process `\alu.$proc$verilog/alu.v:78$18`.
No latch inferred for signal `\ALUControl.\ALUCtl' from process `\ALUControl.$proc$verilog/alu_control.v:82$8'.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [0]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [1]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [2]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [3]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [4]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [5]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.
Removing init bit 1'0 for non-memory siginal `\ALUControl.\ALUCtl [6]` in process `\ALUControl.$proc$verilog/alu_control.v:82$8`.

19.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531'.
  created $adff cell `$procdff$965' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$524'.
  created $dff cell `$procdff$966' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520'.
  created $adff cell `$procdff$967' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$513'.
  created $dff cell `$procdff$968' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$510'.
  created $adff cell `$procdff$969' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$507'.
  created $dff cell `$procdff$970' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$504'.
  created $adff cell `$procdff$971' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$501'.
  created $dff cell `$procdff$972' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$499'.
  created $dff cell `$procdff$973' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$497'.
  created $dff cell `$procdff$974' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493'.
  created $adff cell `$procdff$975' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$486'.
  created $dff cell `$procdff$976' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482'.
  created $adff cell `$procdff$977' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$475'.
  created $dff cell `$procdff$978' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$472'.
  created $adff cell `$procdff$979' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$469'.
  created $dff cell `$procdff$980' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$466'.
  created $adff cell `$procdff$981' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$463'.
  created $dff cell `$procdff$982' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$461'.
  created $dff cell `$procdff$983' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$459'.
  created $dff cell `$procdff$984' with positive edge clock.
Creating register for signal `\csr_file.\rdVal_CSR' using process `\csr_file.$proc$verilog/CSR.v:57$278'.
  created $dff cell `$procdff$985' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$277_ADDR' using process `\csr_file.$proc$verilog/CSR.v:57$278'.
  created $dff cell `$procdff$986' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$277_DATA' using process `\csr_file.$proc$verilog/CSR.v:57$278'.
  created $dff cell `$procdff$987' with positive edge clock.
Creating register for signal `\csr_file.$memwr$\csr_file$verilog/CSR.v:59$277_EN' using process `\csr_file.$proc$verilog/CSR.v:57$278'.
  created $dff cell `$procdff$988' with positive edge clock.
Creating register for signal `\regfile.\rdAddrA_buf' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$989' with positive edge clock.
Creating register for signal `\regfile.\rdAddrB_buf' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$990' with positive edge clock.
Creating register for signal `\regfile.\regDatA' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$991' with positive edge clock.
Creating register for signal `\regfile.\regDatB' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$992' with positive edge clock.
Creating register for signal `\regfile.\wrAddr_buf' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$993' with positive edge clock.
Creating register for signal `\regfile.\wrData_buf' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$994' with positive edge clock.
Creating register for signal `\regfile.\write_buf' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$995' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$251_ADDR' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$996' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$251_DATA' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$997' with positive edge clock.
Creating register for signal `\regfile.$memwr$\regfile$verilog/register_file.v:97$251_EN' using process `\regfile.$proc$verilog/register_file.v:95$252'.
  created $dff cell `$procdff$998' with positive edge clock.
Creating register for signal `\data_mem.\read_data' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$999' with positive edge clock.
Creating register for signal `\data_mem.\clk_stall' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1000' with positive edge clock.
Creating register for signal `\data_mem.\state' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1001' with positive edge clock.
Creating register for signal `\data_mem.\word_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1002' with positive edge clock.
Creating register for signal `\data_mem.\memread_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1003' with positive edge clock.
Creating register for signal `\data_mem.\memwrite_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1004' with positive edge clock.
Creating register for signal `\data_mem.\write_data_buffer' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1005' with positive edge clock.
Creating register for signal `\data_mem.\addr_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1006' with positive edge clock.
Creating register for signal `\data_mem.\sign_mask_buf' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1007' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_ADDR' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1008' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_DATA' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1009' with positive edge clock.
Creating register for signal `\data_mem.$memwr$\data_block$verilog/data_mem.v:283$164_EN' using process `\data_mem.$proc$verilog/data_mem.v:240$233'.
  created $dff cell `$procdff$1010' with positive edge clock.
Creating register for signal `\data_mem.\led_reg' using process `\data_mem.$proc$verilog/data_mem.v:231$229'.
  created $dff cell `$procdff$1011' with positive edge clock.
Creating register for signal `\branch_predictor.\s' using process `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
  created $dff cell `$procdff$1012' with positive edge clock.
Creating register for signal `\branch_predictor.\branch_mem_sig_reg' using process `\branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
  created $dff cell `$procdff$1013' with negative edge clock.
Creating register for signal `\program_counter.\outAddr' using process `\program_counter.$proc$verilog/program_counter.v:65$41'.
  created $dff cell `$procdff$1014' with positive edge clock.
Creating register for signal `\mem_wb.\data_out' using process `\mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
  created $dff cell `$procdff$1015' with positive edge clock.
Creating register for signal `\ex_mem.\data_out' using process `\ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
  created $dff cell `$procdff$1016' with positive edge clock.
Creating register for signal `\id_ex.\data_out' using process `\id_ex.$proc$verilog/pipeline_registers.v:91$12'.
  created $dff cell `$procdff$1017' with positive edge clock.
Creating register for signal `\if_id.\data_out' using process `\if_id.$proc$verilog/pipeline_registers.v:64$10'.
  created $dff cell `$procdff$1018' with positive edge clock.

19.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

19.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$534'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531'.
Removing empty process `SB_DFFNES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1386$531'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$530'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$524'.
Removing empty process `SB_DFFNESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1328$524'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$523'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520'.
Removing empty process `SB_DFFNER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1251$520'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$519'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$513'.
Removing empty process `SB_DFFNESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1193$513'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$512'.
Removing empty process `SB_DFFNS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1122$510'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$509'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$507'.
Removing empty process `SB_DFFNSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1072$507'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$506'.
Removing empty process `SB_DFFNR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:1001$504'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$503'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$501'.
Removing empty process `SB_DFFNSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:951$501'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$500'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$499'.
Removing empty process `SB_DFFNE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:906$499'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$498'.
Removing empty process `SB_DFFN.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:868$497'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$496'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493'.
Removing empty process `SB_DFFES.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:789$493'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$492'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$486'.
Removing empty process `SB_DFFESS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:731$486'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$485'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482'.
Removing empty process `SB_DFFER.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:654$482'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$481'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$475'.
Removing empty process `SB_DFFESR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:596$475'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$474'.
Removing empty process `SB_DFFS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:525$472'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$471'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$469'.
Removing empty process `SB_DFFSS.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:475$469'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$468'.
Removing empty process `SB_DFFR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:404$466'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$465'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$463'.
Removing empty process `SB_DFFSR.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:354$463'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$462'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$461'.
Removing empty process `SB_DFFE.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:309$461'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:0$460'.
Removing empty process `SB_DFF.$proc$/usr/bin/../share/yosys/ice40/cells_sim.v:271$459'.
Removing empty process `top.$proc$toplevel.v:52$290'.
Removing empty process `top.$proc$toplevel.v:51$289'.
Found and cleaned up 1 empty switch in `\sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$286'.
Removing empty process `sign_mask_gen.$proc$verilog/dataMem_mask_gen.v:58$286'.
Found and cleaned up 1 empty switch in `\csr_file.$proc$verilog/CSR.v:57$278'.
Removing empty process `csr_file.$proc$verilog/CSR.v:57$278'.
Removing empty process `regfile.$proc$verilog/register_file.v:0$275'.
Found and cleaned up 1 empty switch in `\regfile.$proc$verilog/register_file.v:95$252'.
Removing empty process `regfile.$proc$verilog/register_file.v:95$252'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:0$249'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:60$248'.
Found and cleaned up 4 empty switches in `\data_mem.$proc$verilog/data_mem.v:240$233'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:240$233'.
Found and cleaned up 1 empty switch in `\data_mem.$proc$verilog/data_mem.v:231$229'.
Removing empty process `data_mem.$proc$verilog/data_mem.v:231$229'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:0$103'.
Found and cleaned up 1 empty switch in `\imm_gen.$proc$verilog/imm_gen.v:54$102'.
Removing empty process `imm_gen.$proc$verilog/imm_gen.v:54$102'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:0$101'.
Found and cleaned up 1 empty switch in `\branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:101$86'.
Removing empty process `branch_predictor.$proc$verilog/branch_predictor.v:92$85'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:0$42'.
Removing empty process `program_counter.$proc$verilog/program_counter.v:65$41'.
Removing empty process `alu.$proc$verilog/alu.v:0$40'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:147$32'.
Removing empty process `alu.$proc$verilog/alu.v:147$32'.
Found and cleaned up 1 empty switch in `\alu.$proc$verilog/alu.v:78$18'.
Removing empty process `alu.$proc$verilog/alu.v:78$18'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:0$17'.
Removing empty process `mem_wb.$proc$verilog/pipeline_registers.v:145$16'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:0$15'.
Removing empty process `ex_mem.$proc$verilog/pipeline_registers.v:118$14'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:0$13'.
Removing empty process `id_ex.$proc$verilog/pipeline_registers.v:91$12'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:0$11'.
Removing empty process `if_id.$proc$verilog/pipeline_registers.v:64$10'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:0$9'.
Found and cleaned up 10 empty switches in `\ALUControl.$proc$verilog/alu_control.v:82$8'.
Removing empty process `ALUControl.$proc$verilog/alu_control.v:82$8'.
Cleaned up 40 empty switches.

19.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module sign_mask_gen.
<suppressed ~1 debug messages>
Optimizing module csr_file.
Optimizing module regfile.
<suppressed ~4 debug messages>
Optimizing module data_mem.
<suppressed ~24 debug messages>
Optimizing module instruction_memory.
<suppressed ~1 debug messages>
Optimizing module control.
Optimizing module imm_gen.
Optimizing module branch_predictor.
Optimizing module ForwardingUnit.
<suppressed ~8 debug messages>
Optimizing module branch_decision.
Optimizing module program_counter.
Optimizing module alu.
<suppressed ~3 debug messages>
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module ALUControl.
<suppressed ~9 debug messages>
Optimizing module mux2to1.
Optimizing module cpu.
Optimizing module adder.

19.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module sign_mask_gen.
Optimizing module csr_file.
Optimizing module regfile.
Optimizing module data_mem.
Optimizing module instruction_memory.
Optimizing module control.
Optimizing module imm_gen.
Optimizing module branch_predictor.
Optimizing module ForwardingUnit.
Optimizing module branch_decision.
Optimizing module program_counter.
Optimizing module alu.
Optimizing module mem_wb.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module ALUControl.
Optimizing module mux2to1.
Optimizing module cpu.
Optimizing module adder.

19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \adder..
Removed 9 unused cells and 187 unused wires.
<suppressed ~30 debug messages>

19.6. Executing CHECK pass (checking for obvious problems).
Checking module ALUControl...
Checking module ForwardingUnit...
Checking module adder...
Checking module alu...
Checking module branch_decision...
Checking module branch_predictor...
Checking module control...
Checking module cpu...
Checking module csr_file...
Checking module data_mem...
Checking module ex_mem...
Checking module id_ex...
Checking module if_id...
Checking module imm_gen...
Checking module instruction_memory...
Checking module mem_wb...
Checking module mux2to1...
Checking module program_counter...
Checking module regfile...
Checking module sign_mask_gen...
Checking module top...
Found and reported 0 problems.

19.7. Executing OPT pass (performing simple optimizations).

19.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~108 debug messages>
Finding identical cells in module `\ForwardingUnit'.
<suppressed ~9 debug messages>
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\branch_decision'.
<suppressed ~6 debug messages>
Finding identical cells in module `\branch_predictor'.
<suppressed ~6 debug messages>
Finding identical cells in module `\control'.
<suppressed ~60 debug messages>
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~72 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~3 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 91 cells.

19.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$857.
    dead port 2/2 on $mux $procmux$859.
    dead port 2/2 on $mux $procmux$873.
    dead port 2/2 on $mux $procmux$912.
    dead port 2/2 on $mux $procmux$875.
    dead port 2/2 on $mux $procmux$923.
    dead port 2/2 on $mux $procmux$937.
    dead port 2/2 on $mux $procmux$888.
    dead port 2/2 on $mux $procmux$848.
    dead port 2/2 on $mux $procmux$953.
    dead port 2/2 on $mux $procmux$896.
    dead port 2/2 on $mux $procmux$898.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~34 debug messages>

19.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    New ctrl vector for $pmux cell $procmux$879: { $procmux$874_CMP $procmux$886_CMP $auto$opt_reduce.cc:134:opt_pmux$1023 $procmux$883_CMP $procmux$858_CMP $procmux$881_CMP $procmux$880_CMP }
    New ctrl vector for $pmux cell $procmux$931: $auto$opt_reduce.cc:134:opt_pmux$1025
    New ctrl vector for $pmux cell $procmux$956: { $auto$opt_reduce.cc:134:opt_pmux$1027 $procmux$954_CMP $procmux$938_CMP $procmux$924_CMP $procmux$899_CMP $procmux$860_CMP $procmux$849_CMP }
    New ctrl vector for $pmux cell $procmux$919: $auto$opt_reduce.cc:134:opt_pmux$1029
    New ctrl vector for $pmux cell $procmux$903: { $procmux$874_CMP $auto$opt_reduce.cc:134:opt_pmux$1031 $procmux$883_CMP $procmux$881_CMP $procmux$880_CMP $procmux$886_CMP $procmux$858_CMP }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$829: { $procmux$841_CMP $procmux$839_CMP $procmux$838_CMP $procmux$837_CMP $procmux$836_CMP $procmux$835_CMP $procmux$834_CMP $procmux$833_CMP $procmux$832_CMP $auto$opt_reduce.cc:134:opt_pmux$1033 $procmux$830_CMP }
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
    Consolidated identical input bits for $mux cell $procmux$721:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281
      New ports: A=1'0, B=1'1, Y=$0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0]
      New connections: $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [31:1] = { $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] $0$memwr$\csr_file$verilog/CSR.v:59$277_EN[31:0]$281 [0] }
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $procmux$739:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236
      New ports: A=1'0, B=1'1, Y=$0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0]
      New connections: $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [31:1] = { $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] $0$memwr$\data_block$verilog/data_mem.v:283$164_EN[31:0]$236 [0] }
    New ctrl vector for $pmux cell $procmux$783: { $procmux$752_CMP $procmux$781_CMP $auto$opt_reduce.cc:134:opt_pmux$1035 }
    New ctrl vector for $pmux cell $procmux$796: { $procmux$752_CMP $auto$opt_reduce.cc:134:opt_pmux$1037 }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
    New ctrl vector for $pmux cell $procmux$809: { $procmux$815_CMP $procmux$814_CMP $auto$opt_reduce.cc:134:opt_pmux$1039 $procmux$811_CMP $procmux$810_CMP }
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
    Consolidated identical input bits for $mux cell $procmux$730:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255
      New ports: A=1'0, B=1'1, Y=$0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0]
      New connections: $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [31:1] = { $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] $0$memwr$\regfile$verilog/register_file.v:97$251_EN[31:0]$255 [0] }
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 12 changes.

19.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

19.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 6 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 7 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 8 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 9 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 10 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 11 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 12 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 13 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 14 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 15 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 16 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 17 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 18 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 19 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 20 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 21 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 22 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 23 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 24 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 25 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 26 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 27 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 28 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 29 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 30 on $procdff$993 ($dff) from module regfile.
Setting constant 0-bit at position 31 on $procdff$993 ($dff) from module regfile.

19.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 106 unused wires.
<suppressed ~8 debug messages>

19.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.7.9. Rerunning OPT passes. (Maybe there is more to do..)

19.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

19.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.7.13. Executing OPT_DFF pass (perform DFF optimizations).

19.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.7.16. Finished OPT passes. (There is nothing left to do.)

19.8. Executing FSM pass (extract and optimize FSM).

19.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking data_mem.state as FSM state register:
    Register has an initialization value.

19.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

19.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

19.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

19.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

19.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

19.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

19.9. Executing OPT pass (performing simple optimizations).

19.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

19.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1012 ($dff) from module branch_predictor (D = { $or$verilog/branch_predictor.v:103$91_Y $or$verilog/branch_predictor.v:104$98_Y }, Q = \s).
Adding EN signal on $procdff$999 ($dff) from module data_mem (D = \read_buf, Q = \read_data).
Adding EN signal on $procdff$1011 ($dff) from module data_mem (D = \write_data, Q = \led_reg).
Adding EN signal on $procdff$1007 ($dff) from module data_mem (D = \sign_mask, Q = \sign_mask_buf).
Adding EN signal on $procdff$1006 ($dff) from module data_mem (D = \addr, Q = \addr_buf).
Adding EN signal on $procdff$1005 ($dff) from module data_mem (D = \write_data, Q = \write_data_buffer).
Adding EN signal on $procdff$1004 ($dff) from module data_mem (D = \memwrite, Q = \memwrite_buf).
Adding EN signal on $procdff$1003 ($dff) from module data_mem (D = \memread, Q = \memread_buf).
Adding EN signal on $procdff$1002 ($dff) from module data_mem (D = $memrd$\data_block$verilog/data_mem.v:261$243_DATA, Q = \word_buf).
Adding EN signal on $procdff$1001 ($dff) from module data_mem (D = $0\state[31:0], Q = \state).
Adding EN signal on $procdff$1000 ($dff) from module data_mem (D = $0\clk_stall[0:0], Q = \clk_stall).

19.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 10 unused cells and 9 unused wires.
<suppressed ~12 debug messages>

19.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~2 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.9.9. Rerunning OPT passes. (Maybe there is more to do..)

19.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

19.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.9.13. Executing OPT_DFF pass (perform DFF optimizations).

19.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.9.16. Finished OPT passes. (There is nothing left to do.)

19.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$844 ($pmux).
Removed top 1 bits (of 2) from port B of cell ALUControl.$procmux$847_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$860_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$870 ($pmux).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$884_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ALUControl.$procmux$885_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ALUControl.$procmux$886_CMP0 ($eq).
Removed top 4 bits (of 7) from mux cell ALUControl.$procmux$893 ($pmux).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$899_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$903 ($pmux).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$919 ($mux).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$924_CMP0 ($eq).
Removed top 3 bits (of 7) from mux cell ALUControl.$procmux$931 ($mux).
Removed top 5 bits (of 7) from port B of cell ALUControl.$procmux$938_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell ALUControl.$procmux$963_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell ALUControl.$procmux$964_CMP0 ($eq).
Removed top 4 bits (of 7) from wire ALUControl.$10\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$3\ALUCtl[6:0].
Removed top 3 bits (of 7) from wire ALUControl.$4\ALUCtl[6:0].
Removed top 31 bits (of 32) from mux cell alu.$ternary$verilog/alu.v:103$24 ($mux).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$825_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$826_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$827_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$834_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$835_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$836_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$837_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$838_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$839_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$840_CMP0 ($eq).
Removed top 31 bits (of 32) from wire alu.$ternary$verilog/alu.v:103$24_Y.
Removed top 2 address bits (of 12) from memory init port csr_file.$auto$proc_memwr.cc:45:proc_memwr$1019 (csr_file).
Removed top 2 address bits (of 12) from memory read port csr_file.$memrd$\csr_file$verilog/CSR.v:61$285 (csr_file).
Removed cell csr_file.$procmux$724 ($mux).
Removed cell csr_file.$procmux$727 ($mux).
Removed top 2 bits (of 12) from wire csr_file.$0$memwr$\csr_file$verilog/CSR.v:59$277_ADDR[11:0]$279.
Removed top 22 address bits (of 32) from memory init port data_mem.$auto$proc_memwr.cc:45:proc_memwr$1021 (data_block).
Removed top 22 address bits (of 32) from memory read port data_mem.$memrd$\data_block$verilog/data_mem.v:261$243 (data_block).
Removed top 18 bits (of 32) from port B of cell data_mem.$eq$verilog/data_mem.v:232$231 ($eq).
Removed top 19 bits (of 32) from port B of cell data_mem.$sub$verilog/data_mem.v:261$244 ($sub).
Removed top 18 bits (of 32) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$244 ($sub).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$740_CMP0 ($eq).
Removed cell data_mem.$procmux$742 ($mux).
Removed cell data_mem.$procmux$745 ($mux).
Removed top 31 bits (of 32) from port B of cell data_mem.$procmux$781_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell data_mem.$procmux$785_CMP0 ($eq).
Removed cell data_mem.$procmux$786 ($mux).
Removed top 31 bits (of 32) from mux cell data_mem.$procmux$789 ($mux).
Removed cell data_mem.$procmux$792 ($mux).
Removed top 24 bits (of 32) from FF cell data_mem.$auto$ff.cc:262:slice$1043 ($dffe).
Removed top 20 bits (of 32) from FF cell data_mem.$auto$ff.cc:262:slice$1045 ($dffe).
Removed top 4 bits (of 14) from port Y of cell data_mem.$sub$verilog/data_mem.v:261$244 ($sub).
Removed top 12 bits (of 13) from port B of cell data_mem.$sub$verilog/data_mem.v:261$244 ($sub).
Removed top 22 bits (of 32) from wire data_mem.$0$memwr$\data_block$verilog/data_mem.v:283$164_ADDR[31:0]$234.
Removed top 31 bits (of 32) from wire data_mem.$procmux$789_Y.
Removed top 22 bits (of 32) from wire data_mem.$sub$verilog/data_mem.v:261$244_Y.
Removed top 20 bits (of 32) from wire data_mem.addr_buf.
Removed top 1 bits (of 32) from mux cell imm_gen.$procmux$809 ($pmux).
Removed top 3 bits (of 4) from port B of cell imm_gen.$procmux$812_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$813_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell imm_gen.$procmux$814_CMP0 ($eq).
Removed top 20 address bits (of 32) from memory init port instruction_memory.$meminit$\instruction_memory$verilog/instruction_mem.v:0$162 (instruction_memory).
Removed top 20 address bits (of 32) from memory read port instruction_memory.$memrd$\instruction_memory$verilog/instruction_mem.v:77$160 (instruction_memory).
Removed top 27 address bits (of 32) from memory init port regfile.$meminit$\regfile$verilog/register_file.v:92$274 (regfile).
Removed cell regfile.$procmux$733 ($mux).
Removed cell regfile.$procmux$736 ($mux).
Removed top 27 bits (of 32) from wire regfile.wrAddr_buf.
Removed top 1 bits (of 2) from port B of cell sign_mask_gen.$procmux$718_CMP0 ($eq).

19.11. Executing PEEPOPT pass (run peephole optimizers).

19.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 18 unused wires.
<suppressed ~5 debug messages>

19.13. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module alu that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$verilog/alu.v:113$26 ($sshr):
    Found 1 activation_patterns using ctrl signal $procmux$835_CMP.
    No candidates found.
  Analyzing resource sharing options for $shr$verilog/alu.v:108$25 ($shr):
    Found 1 activation_patterns using ctrl signal $procmux$836_CMP.
    No candidates found.
  Analyzing resource sharing options for $shl$verilog/alu.v:118$27 ($shl):
    Found 1 activation_patterns using ctrl signal $procmux$834_CMP.
    No candidates found.

19.14. Executing TECHMAP pass (map to technology primitives).

19.14.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

19.14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~114 debug messages>

19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

19.17. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALUControl:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ForwardingUnit:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module adder:
  creating $macc model for $add$verilog/adder.v:53$1 ($add).
  creating $alu model for $macc $add$verilog/adder.v:53$1.
  creating $alu cell for $add$verilog/adder.v:53$1: $auto$alumacc.cc:485:replace_alu$1073
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$verilog/alu.v:93$21 ($add).
  creating $macc model for $sub$verilog/alu.v:98$22 ($sub).
  creating $alu model for $macc $sub$verilog/alu.v:98$22.
  creating $alu model for $macc $add$verilog/alu.v:93$21.
  creating $alu model for $ge$verilog/alu.v:152$37 ($ge): new $alu
  creating $alu model for $ge$verilog/alu.v:154$39 ($ge): merged with $sub$verilog/alu.v:98$22.
  creating $alu model for $lt$verilog/alu.v:103$23 ($lt): merged with $ge$verilog/alu.v:152$37.
  creating $alu model for $lt$verilog/alu.v:153$38 ($lt): merged with $sub$verilog/alu.v:98$22.
  creating $alu cell for $ge$verilog/alu.v:152$37, $lt$verilog/alu.v:103$23: $auto$alumacc.cc:485:replace_alu$1077
  creating $alu cell for $add$verilog/alu.v:93$21: $auto$alumacc.cc:485:replace_alu$1092
  creating $alu cell for $sub$verilog/alu.v:98$22, $ge$verilog/alu.v:154$39, $lt$verilog/alu.v:153$38: $auto$alumacc.cc:485:replace_alu$1095
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_decision:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module branch_predictor:
  creating $macc model for $add$verilog/branch_predictor.v:108$99 ($add).
  creating $alu model for $macc $add$verilog/branch_predictor.v:108$99.
  creating $alu cell for $add$verilog/branch_predictor.v:108$99: $auto$alumacc.cc:485:replace_alu$1108
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module control:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module csr_file:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module data_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ex_mem:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module id_ex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module if_id:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module instruction_memory:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mem_wb:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module program_counter:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module regfile:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module sign_mask_gen:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

19.18. Executing OPT pass (performing simple optimizations).

19.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

19.18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.18.6. Executing OPT_DFF pass (perform DFF optimizations).

19.18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

19.18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.18.9. Rerunning OPT passes. (Maybe there is more to do..)

19.18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

19.18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.18.13. Executing OPT_DFF pass (perform DFF optimizations).

19.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.18.16. Finished OPT passes. (There is nothing left to do.)

19.19. Executing MEMORY pass.

19.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

19.19.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

19.19.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing csr_file.csr_file write port 0.
  Analyzing data_mem.data_block write port 0.
  Analyzing regfile.regfile write port 0.

19.19.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\csr_file'[0] in module `\csr_file': merging output FF to cell.
    Write port 0: non-transparent.
Checking read port `\data_block'[0] in module `\data_mem': merging output FF to cell.
    Write port 0: don't care on collision.
Checking read port `\instruction_memory'[0] in module `\instruction_memory': no output FF found.
Checking read port address `\instruction_memory'[0] in module `\instruction_memory': no address FF found.
Checking read port `\regfile'[0] in module `\regfile': merging output FF to cell.
    Write port 0: non-transparent.
Checking read port `\regfile'[1] in module `\regfile': merging output FF to cell.
    Write port 0: non-transparent.

19.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 4 unused cells and 132 unused wires.
<suppressed ~7 debug messages>

19.19.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory regfile.regfile by address:

19.19.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

19.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.19.9. Executing MEMORY_COLLECT pass (generating $mem cells).

19.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing csr_file.csr_file:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: csr_file.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: csr_file.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: csr_file.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: csr_file.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: csr_file.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: csr_file.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: csr_file.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: csr_file.7.0.0
Processing data_mem.data_block:
  Properties: ports=2 bits=32768 rports=1 wports=1 dbits=32 abits=10 words=1024
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 4 rules:
    Efficiency for rule 4.3: efficiency=50, cells=16, acells=1
    Efficiency for rule 4.2: efficiency=100, cells=8, acells=1
    Efficiency for rule 4.1: efficiency=100, cells=8, acells=2
    Efficiency for rule 1.1: efficiency=100, cells=8, acells=4
    Selected rule 4.2 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: data_block.0.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: data_block.1.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <2 0 0>: data_block.2.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <3 0 0>: data_block.3.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <4 0 0>: data_block.4.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <5 0 0>: data_block.5.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <6 0 0>: data_block.6.0.0
      Creating $__ICE40_RAM4K_M123 cell at grid position <7 0 0>: data_block.7.0.0
Processing instruction_memory.instruction_memory:
  Properties: ports=1 bits=131072 rports=1 wports=0 dbits=32 abits=12 words=4096
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  No acceptable bram resources found.
Processing regfile.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #3 for bram type $__ICE40_RAM4K_M0 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #4 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #5 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'attribute syn_ramstyle="block_ram" ...' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 1) rejected: requirement 'max wports 0' not met.
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
  Checking rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #6 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'max wports 0' not met.
  Selecting best of 2 rules:
    Efficiency for rule 4.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clk.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1

19.22. Executing TECHMAP pass (map to technology primitives).

19.22.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

19.22.2. Continuing TECHMAP pass.
Using template $paramod$22588fa4a5440417df007a2217f322c053bc2366\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$0693594c68317ed206be414ef17dbefae4949356\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
Using template $paramod$653080360916d812187ef2ecc76e41663cbf4686\$__ICE40_RAM4K_M123 for cells of type $__ICE40_RAM4K_M123.
Using template $paramod$b4d8ce0db96a95554838715a90ce0aa2e1dbed4a\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~175 debug messages>

19.23. Executing ICE40_BRAMINIT pass.

19.24. Executing OPT pass (performing simple optimizations).

19.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~4 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~1 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
<suppressed ~66 debug messages>
Optimizing module data_mem.
<suppressed ~91 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
<suppressed ~18 debug messages>
Optimizing module sign_mask_gen.
Optimizing module top.

19.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
<suppressed ~9 debug messages>
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 3 cells.

19.24.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$1059 ($dffe) from module data_mem (D = $procmux$799_Y, Q = \clk_stall, rval = 1'0).

19.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 496 unused wires.
<suppressed ~8 debug messages>

19.24.5. Rerunning OPT passes. (Removed registers in this run.)

19.24.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.24.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.24.8. Executing OPT_DFF pass (perform DFF optimizations).

19.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.24.10. Finished fast OPT passes.

19.25. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \instruction_memory in module \instruction_memory:
  created 4096 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 4095 $mux cells.
  write interface: 0 write mux blocks.

19.26. Executing OPT pass (performing simple optimizations).

19.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

19.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
    Consolidated identical input bits for $mux cell $procmux$870:
      Old ports: A=3'010, B=3'110, Y=$8\ALUCtl[6:0] [2:0]
      New ports: A=1'0, B=1'1, Y=$8\ALUCtl[6:0] [2]
      New connections: $8\ALUCtl[6:0] [1:0] = 2'10
    Consolidated identical input bits for $pmux cell $procmux$879:
      Old ports: A={ 4'0000 $8\ALUCtl[6:0] [2:0] }, B={ 25'0000101000011100010000000 $6\ALUCtl[6:0] [2:0] 14'00000010000000 }, Y=$7\ALUCtl[6:0]
      New ports: A={ 1'0 $8\ALUCtl[6:0] [2:0] }, B={ 13'0101011110000 $6\ALUCtl[6:0] [2:0] 8'00010000 }, Y=$7\ALUCtl[6:0] [3:0]
      New connections: $7\ALUCtl[6:0] [6:4] = 3'000
    Consolidated identical input bits for $mux cell $procmux$893:
      Old ports: A=3'011, B=3'100, Y=$6\ALUCtl[6:0] [2:0]
      New ports: A=2'01, B=2'10, Y={ $6\ALUCtl[6:0] [2] $6\ALUCtl[6:0] [0] }
      New connections: $6\ALUCtl[6:0] [1] = $6\ALUCtl[6:0] [0]
    Consolidated identical input bits for $mux cell $procmux$919:
      Old ports: A=4'1111, B=4'0010, Y=$4\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$4\ALUCtl[6:0] [0]
      New connections: $4\ALUCtl[6:0] [3:1] = { $4\ALUCtl[6:0] [0] $4\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$931:
      Old ports: A=4'1111, B=4'0010, Y=$3\ALUCtl[6:0]
      New ports: A=1'1, B=1'0, Y=$3\ALUCtl[6:0] [0]
      New connections: $3\ALUCtl[6:0] [3:1] = { $3\ALUCtl[6:0] [0] $3\ALUCtl[6:0] [0] 1'1 }
    Consolidated identical input bits for $pmux cell $procmux$946:
      Old ports: A=7'0001111, B=42'001011001001100110110100011010101101100110, Y=$2\ALUCtl[6:0]
      New ports: A=4'0001, B=24'001001000110100010101100, Y={ $2\ALUCtl[6:0] [6:4] $2\ALUCtl[6:0] [0] }
      New connections: $2\ALUCtl[6:0] [3:1] = { $2\ALUCtl[6:0] [0] 2'11 }
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $pmux cell $procmux$783:
      Old ports: A=1, B={ 31'0000000000000000000000000000001 $auto$wreduce.cc:454:run$1068 [0] 32'00000000000000000000000000000000 }, Y=$0\state[31:0]
      New ports: A=2'01, B={ 1'1 $auto$wreduce.cc:454:run$1068 [0] 2'00 }, Y=$0\state[31:0] [1:0]
      New connections: $0\state[31:0] [31:2] = 30'000000000000000000000000000000
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$211:
      Old ports: A={ 24'000000000000000000000000 \word_buf [15:8] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:8] }, Y=$ternary$verilog/data_mem.v:204$211_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:204$211_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$211_Y [31:9] $ternary$verilog/data_mem.v:204$211_Y [7:0] } = { $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] $ternary$verilog/data_mem.v:204$211_Y [8] \word_buf [15:8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$213:
      Old ports: A={ 24'000000000000000000000000 \word_buf [7:0] }, B={ \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7] \word_buf [7:0] }, Y=$ternary$verilog/data_mem.v:204$213_Y
      New ports: A=1'0, B=\word_buf [7], Y=$ternary$verilog/data_mem.v:204$213_Y [8]
      New connections: { $ternary$verilog/data_mem.v:204$213_Y [31:9] $ternary$verilog/data_mem.v:204$213_Y [7:0] } = { $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] $ternary$verilog/data_mem.v:204$213_Y [8] \word_buf [7:0] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$216:
      Old ports: A={ 24'000000000000000000000000 \word_buf [31:24] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:24] }, Y=$ternary$verilog/data_mem.v:205$216_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:205$216_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$216_Y [31:9] $ternary$verilog/data_mem.v:205$216_Y [7:0] } = { $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] $ternary$verilog/data_mem.v:205$216_Y [8] \word_buf [31:24] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$218:
      Old ports: A={ 24'000000000000000000000000 \word_buf [23:16] }, B={ \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23] \word_buf [23:16] }, Y=$ternary$verilog/data_mem.v:205$218_Y
      New ports: A=1'0, B=\word_buf [23], Y=$ternary$verilog/data_mem.v:205$218_Y [8]
      New connections: { $ternary$verilog/data_mem.v:205$218_Y [31:9] $ternary$verilog/data_mem.v:205$218_Y [7:0] } = { $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] $ternary$verilog/data_mem.v:205$218_Y [8] \word_buf [23:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$221:
      Old ports: A={ 16'0000000000000000 \word_buf [31:16] }, B={ \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31] \word_buf [31:16] }, Y=$ternary$verilog/data_mem.v:206$221_Y
      New ports: A=1'0, B=\word_buf [31], Y=$ternary$verilog/data_mem.v:206$221_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$221_Y [31:17] $ternary$verilog/data_mem.v:206$221_Y [15:0] } = { $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] $ternary$verilog/data_mem.v:206$221_Y [16] \word_buf [31:16] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$223:
      Old ports: A={ 16'0000000000000000 \word_buf [15:0] }, B={ \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15] \word_buf [15:0] }, Y=$ternary$verilog/data_mem.v:206$223_Y
      New ports: A=1'0, B=\word_buf [15], Y=$ternary$verilog/data_mem.v:206$223_Y [16]
      New connections: { $ternary$verilog/data_mem.v:206$223_Y [31:17] $ternary$verilog/data_mem.v:206$223_Y [15:0] } = { $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] $ternary$verilog/data_mem.v:206$223_Y [16] \word_buf [15:0] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:204$214:
      Old ports: A=$ternary$verilog/data_mem.v:204$213_Y, B=$ternary$verilog/data_mem.v:204$211_Y, Y=\out1
      New ports: A={ $ternary$verilog/data_mem.v:204$213_Y [8] \word_buf [7:0] }, B={ $ternary$verilog/data_mem.v:204$211_Y [8] \word_buf [15:8] }, Y=\out1 [8:0]
      New connections: \out1 [31:9] = { \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] \out1 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:205$219:
      Old ports: A=$ternary$verilog/data_mem.v:205$218_Y, B=$ternary$verilog/data_mem.v:205$216_Y, Y=\out2
      New ports: A={ $ternary$verilog/data_mem.v:205$218_Y [8] \word_buf [23:16] }, B={ $ternary$verilog/data_mem.v:205$216_Y [8] \word_buf [31:24] }, Y=\out2 [8:0]
      New connections: \out2 [31:9] = { \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] \out2 [8] }
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:206$224:
      Old ports: A=$ternary$verilog/data_mem.v:206$223_Y, B=$ternary$verilog/data_mem.v:206$221_Y, Y=\out3
      New ports: A={ $ternary$verilog/data_mem.v:206$223_Y [16] \word_buf [15:0] }, B={ $ternary$verilog/data_mem.v:206$221_Y [16] \word_buf [31:16] }, Y=\out3 [16:0]
      New connections: \out3 [31:17] = { \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] \out3 [16] }
  Optimizing cells in module \data_mem.
    Consolidated identical input bits for $mux cell $ternary$verilog/data_mem.v:209$226:
      Old ports: A=\out1, B=\out2, Y=\out5
      New ports: A=\out1 [8:0], B=\out2 [8:0], Y=\out5 [8:0]
      New connections: \out5 [31:9] = { \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] \out5 [8] }
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 17 changes.

19.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~6 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 2 cells.

19.26.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $memory\instruction_memory[0]$1324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1]$1326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2]$1328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3]$1330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4]$1332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[5]$1334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[6]$1336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[7]$1338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[8]$1340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[9]$1342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[10]$1344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[11]$1346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[12]$1348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[13]$1350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[14]$1352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[15]$1354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[16]$1356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[17]$1358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[18]$1360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[19]$1362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[20]$1364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[21]$1366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[22]$1368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[23]$1370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[24]$1372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[25]$1374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[26]$1376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[27]$1378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[28]$1380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[29]$1382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[30]$1384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[31]$1386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[32]$1388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[33]$1390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[34]$1392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[35]$1394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[36]$1396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[37]$1398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[38]$1400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[39]$1402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[40]$1404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[41]$1406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[42]$1408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[43]$1410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[44]$1412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[45]$1414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[46]$1416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[47]$1418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[48]$1420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[49]$1422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[50]$1424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[51]$1426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[52]$1428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[53]$1430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[54]$1432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[55]$1434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[56]$1436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[57]$1438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[58]$1440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[59]$1442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[60]$1444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[61]$1446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[62]$1448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[63]$1450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[64]$1452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[65]$1454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[66]$1456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[67]$1458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[68]$1460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[69]$1462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[70]$1464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[71]$1466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[72]$1468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[73]$1470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[74]$1472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[75]$1474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[76]$1476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[77]$1478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[78]$1480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[79]$1482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[80]$1484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[81]$1486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[82]$1488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[83]$1490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[84]$1492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[85]$1494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[86]$1496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[87]$1498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[88]$1500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[89]$1502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[90]$1504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[91]$1506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[92]$1508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[93]$1510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[94]$1512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[95]$1514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[96]$1516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[97]$1518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[98]$1520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[99]$1522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[100]$1524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[101]$1526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[102]$1528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[103]$1530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[104]$1532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[105]$1534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[106]$1536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[107]$1538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[108]$1540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[109]$1542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[110]$1544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[111]$1546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[112]$1548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[113]$1550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[114]$1552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[115]$1554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[116]$1556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[117]$1558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[118]$1560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[119]$1562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[120]$1564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[121]$1566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[122]$1568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[123]$1570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[124]$1572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[125]$1574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[126]$1576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[127]$1578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[128]$1580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[129]$1582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[130]$1584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[131]$1586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[132]$1588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[133]$1590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[134]$1592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[135]$1594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[136]$1596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[137]$1598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[138]$1600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[139]$1602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[140]$1604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[141]$1606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[142]$1608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[143]$1610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[144]$1612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[145]$1614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[146]$1616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[147]$1618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[148]$1620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[149]$1622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[150]$1624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[151]$1626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[152]$1628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[153]$1630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[154]$1632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[155]$1634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[156]$1636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[157]$1638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[158]$1640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[159]$1642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[160]$1644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[161]$1646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[162]$1648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[163]$1650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[164]$1652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[165]$1654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[166]$1656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[167]$1658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[168]$1660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[169]$1662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[170]$1664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[171]$1666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[172]$1668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[173]$1670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[174]$1672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[175]$1674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[176]$1676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[177]$1678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[178]$1680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[179]$1682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[180]$1684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[181]$1686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[182]$1688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[183]$1690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[184]$1692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[185]$1694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[186]$1696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[187]$1698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[188]$1700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[189]$1702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[190]$1704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[191]$1706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[192]$1708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[193]$1710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[194]$1712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[195]$1714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[196]$1716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[197]$1718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[198]$1720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[199]$1722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[200]$1724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[201]$1726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[202]$1728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[203]$1730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[204]$1732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[205]$1734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[206]$1736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[207]$1738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[208]$1740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[209]$1742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[210]$1744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[211]$1746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[212]$1748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[213]$1750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[214]$1752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[215]$1754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[216]$1756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[217]$1758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[218]$1760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[219]$1762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[220]$1764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[221]$1766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[222]$1768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[223]$1770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[224]$1772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[225]$1774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[226]$1776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[227]$1778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[228]$1780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[229]$1782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[230]$1784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[231]$1786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[232]$1788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[233]$1790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[234]$1792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[235]$1794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[236]$1796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[237]$1798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[238]$1800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[239]$1802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[240]$1804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[241]$1806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[242]$1808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[243]$1810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[244]$1812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[245]$1814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[246]$1816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[247]$1818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[248]$1820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[249]$1822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[250]$1824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[251]$1826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[252]$1828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[253]$1830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[254]$1832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[255]$1834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[256]$1836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[257]$1838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[258]$1840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[259]$1842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[260]$1844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[261]$1846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[262]$1848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[263]$1850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[264]$1852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[265]$1854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[266]$1856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[267]$1858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[268]$1860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[269]$1862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[270]$1864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[271]$1866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[272]$1868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[273]$1870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[274]$1872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[275]$1874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[276]$1876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[277]$1878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[278]$1880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[279]$1882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[280]$1884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[281]$1886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[282]$1888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[283]$1890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[284]$1892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[285]$1894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[286]$1896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[287]$1898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[288]$1900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[289]$1902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[290]$1904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[291]$1906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[292]$1908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[293]$1910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[294]$1912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[295]$1914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[296]$1916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[297]$1918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[298]$1920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[299]$1922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[300]$1924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[301]$1926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[302]$1928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[303]$1930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[304]$1932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[305]$1934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[306]$1936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[307]$1938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[308]$1940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[309]$1942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[310]$1944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[311]$1946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[312]$1948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[313]$1950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[314]$1952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[315]$1954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[316]$1956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[317]$1958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[318]$1960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[319]$1962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[320]$1964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[321]$1966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[322]$1968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[323]$1970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[324]$1972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[325]$1974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[326]$1976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[327]$1978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[328]$1980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[329]$1982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[330]$1984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[331]$1986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[332]$1988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[333]$1990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[334]$1992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[335]$1994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[336]$1996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[337]$1998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[338]$2000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[339]$2002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[340]$2004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[341]$2006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[342]$2008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[343]$2010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[344]$2012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[345]$2014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[346]$2016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[347]$2018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[348]$2020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[349]$2022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[350]$2024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[351]$2026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[352]$2028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[353]$2030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[354]$2032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[355]$2034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[356]$2036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[357]$2038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[358]$2040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[359]$2042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[360]$2044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[361]$2046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[362]$2048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[363]$2050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[364]$2052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[365]$2054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[366]$2056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[367]$2058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[368]$2060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[369]$2062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[370]$2064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[371]$2066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[372]$2068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[373]$2070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[374]$2072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[375]$2074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[376]$2076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[377]$2078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[378]$2080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[379]$2082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[380]$2084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[381]$2086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[382]$2088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[383]$2090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[384]$2092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[385]$2094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[386]$2096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[387]$2098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[388]$2100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[389]$2102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[390]$2104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[391]$2106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[392]$2108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[393]$2110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[394]$2112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[395]$2114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[396]$2116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[397]$2118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[398]$2120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[399]$2122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[400]$2124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[401]$2126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[402]$2128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[403]$2130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[404]$2132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[405]$2134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[406]$2136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[407]$2138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[408]$2140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[409]$2142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[410]$2144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[411]$2146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[412]$2148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[413]$2150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[414]$2152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[415]$2154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[416]$2156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[417]$2158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[418]$2160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[419]$2162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[420]$2164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[421]$2166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[422]$2168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[423]$2170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[424]$2172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[425]$2174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[426]$2176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[427]$2178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[428]$2180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[429]$2182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[430]$2184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[431]$2186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[432]$2188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[433]$2190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[434]$2192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[435]$2194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[436]$2196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[437]$2198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[438]$2200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[439]$2202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[440]$2204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[441]$2206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[442]$2208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[443]$2210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[444]$2212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[445]$2214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[446]$2216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[447]$2218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[448]$2220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[449]$2222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[450]$2224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[451]$2226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[452]$2228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[453]$2230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[454]$2232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[455]$2234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[456]$2236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[457]$2238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[458]$2240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[459]$2242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[460]$2244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[461]$2246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[462]$2248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[463]$2250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[464]$2252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[465]$2254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[466]$2256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[467]$2258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[468]$2260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[469]$2262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[470]$2264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[471]$2266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[472]$2268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[473]$2270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[474]$2272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[475]$2274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[476]$2276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[477]$2278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[478]$2280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[479]$2282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[480]$2284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[481]$2286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[482]$2288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[483]$2290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[484]$2292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[485]$2294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[486]$2296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[487]$2298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[488]$2300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[489]$2302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[490]$2304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[491]$2306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[492]$2308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[493]$2310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[494]$2312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[495]$2314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[496]$2316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[497]$2318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[498]$2320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[499]$2322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[500]$2324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[501]$2326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[502]$2328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[503]$2330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[504]$2332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[505]$2334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[506]$2336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[507]$2338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[508]$2340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[509]$2342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[510]$2344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[511]$2346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[512]$2348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[513]$2350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[514]$2352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[515]$2354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[516]$2356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[517]$2358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[518]$2360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[519]$2362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[520]$2364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[521]$2366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[522]$2368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[523]$2370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[524]$2372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[525]$2374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[526]$2376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[527]$2378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[528]$2380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[529]$2382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[530]$2384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[531]$2386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[532]$2388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[533]$2390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[534]$2392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[535]$2394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[536]$2396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[537]$2398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[538]$2400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[539]$2402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[540]$2404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[541]$2406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[542]$2408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[543]$2410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[544]$2412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[545]$2414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[546]$2416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[547]$2418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[548]$2420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[549]$2422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[550]$2424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[551]$2426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[552]$2428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[553]$2430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[554]$2432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[555]$2434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[556]$2436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[557]$2438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[558]$2440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[559]$2442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[560]$2444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[561]$2446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[562]$2448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[563]$2450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[564]$2452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[565]$2454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[566]$2456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[567]$2458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[568]$2460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[569]$2462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[570]$2464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[571]$2466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[572]$2468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[573]$2470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[574]$2472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[575]$2474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[576]$2476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[577]$2478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[578]$2480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[579]$2482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[580]$2484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[581]$2486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[582]$2488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[583]$2490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[584]$2492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[585]$2494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[586]$2496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[587]$2498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[588]$2500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[589]$2502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[590]$2504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[591]$2506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[592]$2508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[593]$2510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[594]$2512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[595]$2514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[596]$2516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[597]$2518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[598]$2520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[599]$2522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[600]$2524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[601]$2526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[602]$2528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[603]$2530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[604]$2532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[605]$2534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[606]$2536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[607]$2538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[608]$2540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[609]$2542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[610]$2544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[611]$2546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[612]$2548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[613]$2550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[614]$2552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[615]$2554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[616]$2556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[617]$2558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[618]$2560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[619]$2562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[620]$2564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[621]$2566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[622]$2568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[623]$2570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[624]$2572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[625]$2574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[626]$2576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[627]$2578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[628]$2580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[629]$2582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[630]$2584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[631]$2586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[632]$2588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[633]$2590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[634]$2592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[635]$2594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[636]$2596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[637]$2598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[638]$2600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[639]$2602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[640]$2604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[641]$2606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[642]$2608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[643]$2610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[644]$2612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[645]$2614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[646]$2616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[647]$2618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[648]$2620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[649]$2622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[650]$2624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[651]$2626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[652]$2628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[653]$2630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[654]$2632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[655]$2634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[656]$2636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[657]$2638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[658]$2640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[659]$2642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[660]$2644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[661]$2646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[662]$2648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[663]$2650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[664]$2652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[665]$2654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[666]$2656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[667]$2658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[668]$2660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[669]$2662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[670]$2664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[671]$2666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[672]$2668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[673]$2670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[674]$2672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[675]$2674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[676]$2676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[677]$2678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[678]$2680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[679]$2682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[680]$2684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[681]$2686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[682]$2688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[683]$2690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[684]$2692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[685]$2694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[686]$2696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[687]$2698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[688]$2700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[689]$2702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[690]$2704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[691]$2706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[692]$2708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[693]$2710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[694]$2712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[695]$2714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[696]$2716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[697]$2718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[698]$2720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[699]$2722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[700]$2724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[701]$2726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[702]$2728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[703]$2730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[704]$2732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[705]$2734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[706]$2736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[707]$2738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[708]$2740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[709]$2742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[710]$2744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[711]$2746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[712]$2748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[713]$2750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[714]$2752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[715]$2754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[716]$2756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[717]$2758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[718]$2760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[719]$2762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[720]$2764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[721]$2766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[722]$2768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[723]$2770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[724]$2772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[725]$2774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[726]$2776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[727]$2778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[728]$2780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[729]$2782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[730]$2784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[731]$2786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[732]$2788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[733]$2790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[734]$2792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[735]$2794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[736]$2796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[737]$2798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[738]$2800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[739]$2802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[740]$2804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[741]$2806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[742]$2808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[743]$2810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[744]$2812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[745]$2814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[746]$2816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[747]$2818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[748]$2820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[749]$2822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[750]$2824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[751]$2826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[752]$2828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[753]$2830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[754]$2832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[755]$2834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[756]$2836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[757]$2838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[758]$2840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[759]$2842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[760]$2844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[761]$2846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[762]$2848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[763]$2850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[764]$2852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[765]$2854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[766]$2856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[767]$2858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[768]$2860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[769]$2862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[770]$2864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[771]$2866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[772]$2868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[773]$2870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[774]$2872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[775]$2874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[776]$2876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[777]$2878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[778]$2880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[779]$2882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[780]$2884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[781]$2886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[782]$2888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[783]$2890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[784]$2892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[785]$2894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[786]$2896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[787]$2898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[788]$2900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[789]$2902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[790]$2904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[791]$2906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[792]$2908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[793]$2910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[794]$2912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[795]$2914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[796]$2916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[797]$2918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[798]$2920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[799]$2922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[800]$2924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[801]$2926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[802]$2928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[803]$2930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[804]$2932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[805]$2934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[806]$2936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[807]$2938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[808]$2940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[809]$2942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[810]$2944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[811]$2946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[812]$2948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[813]$2950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[814]$2952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[815]$2954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[816]$2956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[817]$2958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[818]$2960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[819]$2962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[820]$2964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[821]$2966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[822]$2968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[823]$2970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[824]$2972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[825]$2974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[826]$2976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[827]$2978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[828]$2980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[829]$2982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[830]$2984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[831]$2986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[832]$2988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[833]$2990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[834]$2992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[835]$2994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[836]$2996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[837]$2998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[838]$3000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[839]$3002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[840]$3004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[841]$3006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[842]$3008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[843]$3010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[844]$3012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[845]$3014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[846]$3016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[847]$3018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[848]$3020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[849]$3022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[850]$3024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[851]$3026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[852]$3028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[853]$3030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[854]$3032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[855]$3034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[856]$3036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[857]$3038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[858]$3040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[859]$3042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[860]$3044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[861]$3046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[862]$3048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[863]$3050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[864]$3052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[865]$3054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[866]$3056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[867]$3058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[868]$3060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[869]$3062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[870]$3064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[871]$3066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[872]$3068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[873]$3070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[874]$3072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[875]$3074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[876]$3076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[877]$3078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[878]$3080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[879]$3082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[880]$3084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[881]$3086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[882]$3088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[883]$3090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[884]$3092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[885]$3094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[886]$3096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[887]$3098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[888]$3100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[889]$3102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[890]$3104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[891]$3106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[892]$3108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[893]$3110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[894]$3112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[895]$3114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[896]$3116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[897]$3118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[898]$3120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[899]$3122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[900]$3124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[901]$3126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[902]$3128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[903]$3130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[904]$3132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[905]$3134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[906]$3136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[907]$3138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[908]$3140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[909]$3142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[910]$3144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[911]$3146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[912]$3148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[913]$3150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[914]$3152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[915]$3154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[916]$3156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[917]$3158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[918]$3160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[919]$3162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[920]$3164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[921]$3166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[922]$3168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[923]$3170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[924]$3172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[925]$3174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[926]$3176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[927]$3178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[928]$3180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[929]$3182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[930]$3184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[931]$3186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[932]$3188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[933]$3190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[934]$3192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[935]$3194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[936]$3196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[937]$3198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[938]$3200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[939]$3202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[940]$3204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[941]$3206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[942]$3208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[943]$3210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[944]$3212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[945]$3214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[946]$3216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[947]$3218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[948]$3220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[949]$3222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[950]$3224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[951]$3226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[952]$3228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[953]$3230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[954]$3232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[955]$3234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[956]$3236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[957]$3238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[958]$3240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[959]$3242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[960]$3244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[961]$3246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[962]$3248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[963]$3250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[964]$3252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[965]$3254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[966]$3256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[967]$3258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[968]$3260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[969]$3262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[970]$3264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[971]$3266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[972]$3268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[973]$3270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[974]$3272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[975]$3274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[976]$3276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[977]$3278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[978]$3280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[979]$3282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[980]$3284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[981]$3286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[982]$3288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[983]$3290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[984]$3292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[985]$3294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[986]$3296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[987]$3298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[988]$3300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[989]$3302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[990]$3304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[991]$3306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[992]$3308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[993]$3310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[994]$3312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[995]$3314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[996]$3316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[997]$3318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[998]$3320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[999]$3322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1000]$3324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1001]$3326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1002]$3328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1003]$3330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1004]$3332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1005]$3334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1006]$3336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1007]$3338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1008]$3340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1009]$3342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1010]$3344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1011]$3346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1012]$3348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1013]$3350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1014]$3352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1015]$3354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1016]$3356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1017]$3358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1018]$3360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1019]$3362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1020]$3364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1021]$3366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1022]$3368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1023]$3370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1024]$3372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1025]$3374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1026]$3376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1027]$3378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1028]$3380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1029]$3382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1030]$3384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1031]$3386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1032]$3388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1033]$3390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1034]$3392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1035]$3394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1036]$3396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1037]$3398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1038]$3400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1039]$3402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1040]$3404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1041]$3406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1042]$3408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1043]$3410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1044]$3412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1045]$3414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1046]$3416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1047]$3418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1048]$3420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1049]$3422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1050]$3424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1051]$3426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1052]$3428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1053]$3430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1054]$3432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1055]$3434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1056]$3436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1057]$3438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1058]$3440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1059]$3442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1060]$3444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1061]$3446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1062]$3448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1063]$3450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1064]$3452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1065]$3454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1066]$3456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1067]$3458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1068]$3460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1069]$3462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1070]$3464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1071]$3466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1072]$3468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1073]$3470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1074]$3472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1075]$3474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1076]$3476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1077]$3478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1078]$3480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1079]$3482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1080]$3484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1081]$3486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1082]$3488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1083]$3490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1084]$3492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1085]$3494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1086]$3496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1087]$3498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1088]$3500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1089]$3502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1090]$3504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1091]$3506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1092]$3508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1093]$3510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1094]$3512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1095]$3514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1096]$3516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1097]$3518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1098]$3520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1099]$3522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1100]$3524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1101]$3526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1102]$3528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1103]$3530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1104]$3532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1105]$3534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1106]$3536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1107]$3538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1108]$3540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1109]$3542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1110]$3544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1111]$3546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1112]$3548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1113]$3550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1114]$3552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1115]$3554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1116]$3556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1117]$3558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1118]$3560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1119]$3562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1120]$3564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1121]$3566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1122]$3568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1123]$3570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1124]$3572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1125]$3574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1126]$3576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1127]$3578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1128]$3580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1129]$3582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1130]$3584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1131]$3586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1132]$3588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1133]$3590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1134]$3592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1135]$3594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1136]$3596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1137]$3598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1138]$3600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1139]$3602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1140]$3604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1141]$3606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1142]$3608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1143]$3610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1144]$3612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1145]$3614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1146]$3616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1147]$3618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1148]$3620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1149]$3622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1150]$3624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1151]$3626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1152]$3628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1153]$3630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1154]$3632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1155]$3634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1156]$3636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1157]$3638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1158]$3640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1159]$3642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1160]$3644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1161]$3646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1162]$3648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1163]$3650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1164]$3652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1165]$3654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1166]$3656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1167]$3658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1168]$3660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1169]$3662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1170]$3664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1171]$3666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1172]$3668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1173]$3670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1174]$3672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1175]$3674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1176]$3676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1177]$3678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1178]$3680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1179]$3682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1180]$3684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1181]$3686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1182]$3688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1183]$3690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1184]$3692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1185]$3694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1186]$3696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1187]$3698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1188]$3700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1189]$3702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1190]$3704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1191]$3706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1192]$3708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1193]$3710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1194]$3712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1195]$3714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1196]$3716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1197]$3718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1198]$3720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1199]$3722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1200]$3724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1201]$3726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1202]$3728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1203]$3730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1204]$3732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1205]$3734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1206]$3736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1207]$3738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1208]$3740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1209]$3742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1210]$3744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1211]$3746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1212]$3748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1213]$3750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1214]$3752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1215]$3754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1216]$3756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1217]$3758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1218]$3760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1219]$3762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1220]$3764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1221]$3766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1222]$3768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1223]$3770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1224]$3772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1225]$3774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1226]$3776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1227]$3778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1228]$3780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1229]$3782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1230]$3784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1231]$3786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1232]$3788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1233]$3790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1234]$3792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1235]$3794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1236]$3796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1237]$3798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1238]$3800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1239]$3802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1240]$3804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1241]$3806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1242]$3808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1243]$3810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1244]$3812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1245]$3814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1246]$3816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1247]$3818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1248]$3820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1249]$3822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1250]$3824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1251]$3826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1252]$3828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1253]$3830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1254]$3832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1255]$3834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1256]$3836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1257]$3838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1258]$3840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1259]$3842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1260]$3844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1261]$3846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1262]$3848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1263]$3850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1264]$3852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1265]$3854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1266]$3856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1267]$3858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1268]$3860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1269]$3862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1270]$3864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1271]$3866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1272]$3868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1273]$3870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1274]$3872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1275]$3874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1276]$3876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1277]$3878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1278]$3880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1279]$3882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1280]$3884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1281]$3886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1282]$3888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1283]$3890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1284]$3892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1285]$3894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1286]$3896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1287]$3898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1288]$3900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1289]$3902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1290]$3904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1291]$3906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1292]$3908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1293]$3910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1294]$3912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1295]$3914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1296]$3916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1297]$3918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1298]$3920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1299]$3922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1300]$3924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1301]$3926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1302]$3928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1303]$3930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1304]$3932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1305]$3934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1306]$3936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1307]$3938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1308]$3940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1309]$3942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1310]$3944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1311]$3946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1312]$3948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1313]$3950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1314]$3952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1315]$3954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1316]$3956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1317]$3958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1318]$3960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1319]$3962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1320]$3964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1321]$3966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1322]$3968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1323]$3970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1324]$3972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1325]$3974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1326]$3976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1327]$3978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1328]$3980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1329]$3982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1330]$3984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1331]$3986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1332]$3988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1333]$3990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1334]$3992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1335]$3994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1336]$3996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1337]$3998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1338]$4000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1339]$4002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1340]$4004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1341]$4006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1342]$4008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1343]$4010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1344]$4012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1345]$4014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1346]$4016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1347]$4018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1348]$4020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1349]$4022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1350]$4024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1351]$4026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1352]$4028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1353]$4030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1354]$4032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1355]$4034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1356]$4036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1357]$4038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1358]$4040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1359]$4042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1360]$4044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1361]$4046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1362]$4048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1363]$4050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1364]$4052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1365]$4054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1366]$4056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1367]$4058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1368]$4060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1369]$4062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1370]$4064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1371]$4066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1372]$4068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1373]$4070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1374]$4072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1375]$4074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1376]$4076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1377]$4078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1378]$4080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1379]$4082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1380]$4084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1381]$4086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1382]$4088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1383]$4090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1384]$4092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1385]$4094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1386]$4096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1387]$4098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1388]$4100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1389]$4102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1390]$4104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1391]$4106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1392]$4108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1393]$4110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1394]$4112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1395]$4114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1396]$4116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1397]$4118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1398]$4120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1399]$4122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1400]$4124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1401]$4126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1402]$4128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1403]$4130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1404]$4132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1405]$4134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1406]$4136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1407]$4138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1408]$4140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1409]$4142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1410]$4144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1411]$4146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1412]$4148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1413]$4150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1414]$4152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1415]$4154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1416]$4156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1417]$4158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1418]$4160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1419]$4162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1420]$4164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1421]$4166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1422]$4168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1423]$4170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1424]$4172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1425]$4174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1426]$4176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1427]$4178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1428]$4180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1429]$4182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1430]$4184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1431]$4186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1432]$4188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1433]$4190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1434]$4192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1435]$4194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1436]$4196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1437]$4198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1438]$4200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1439]$4202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1440]$4204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1441]$4206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1442]$4208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1443]$4210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1444]$4212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1445]$4214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1446]$4216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1447]$4218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1448]$4220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1449]$4222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1450]$4224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1451]$4226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1452]$4228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1453]$4230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1454]$4232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1455]$4234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1456]$4236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1457]$4238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1458]$4240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1459]$4242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1460]$4244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1461]$4246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1462]$4248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1463]$4250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1464]$4252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1465]$4254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1466]$4256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1467]$4258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1468]$4260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1469]$4262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1470]$4264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1471]$4266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1472]$4268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1473]$4270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1474]$4272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1475]$4274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1476]$4276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1477]$4278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1478]$4280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1479]$4282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1480]$4284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1481]$4286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1482]$4288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1483]$4290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1484]$4292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1485]$4294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1486]$4296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1487]$4298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1488]$4300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1489]$4302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1490]$4304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1491]$4306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1492]$4308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1493]$4310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1494]$4312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1495]$4314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1496]$4316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1497]$4318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1498]$4320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1499]$4322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1500]$4324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1501]$4326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1502]$4328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1503]$4330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1504]$4332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1505]$4334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1506]$4336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1507]$4338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1508]$4340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1509]$4342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1510]$4344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1511]$4346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1512]$4348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1513]$4350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1514]$4352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1515]$4354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1516]$4356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1517]$4358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1518]$4360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1519]$4362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1520]$4364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1521]$4366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1522]$4368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1523]$4370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1524]$4372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1525]$4374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1526]$4376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1527]$4378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1528]$4380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1529]$4382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1530]$4384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1531]$4386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1532]$4388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1533]$4390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1534]$4392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1535]$4394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1536]$4396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1537]$4398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1538]$4400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1539]$4402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1540]$4404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1541]$4406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1542]$4408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1543]$4410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1544]$4412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1545]$4414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1546]$4416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1547]$4418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1548]$4420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1549]$4422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1550]$4424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1551]$4426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1552]$4428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1553]$4430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1554]$4432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1555]$4434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1556]$4436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1557]$4438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1558]$4440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1559]$4442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1560]$4444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1561]$4446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1562]$4448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1563]$4450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1564]$4452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1565]$4454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1566]$4456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1567]$4458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1568]$4460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1569]$4462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1570]$4464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1571]$4466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1572]$4468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1573]$4470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1574]$4472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1575]$4474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1576]$4476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1577]$4478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1578]$4480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1579]$4482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1580]$4484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1581]$4486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1582]$4488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1583]$4490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1584]$4492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1585]$4494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1586]$4496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1587]$4498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1588]$4500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1589]$4502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1590]$4504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1591]$4506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1592]$4508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1593]$4510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1594]$4512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1595]$4514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1596]$4516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1597]$4518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1598]$4520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1599]$4522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1600]$4524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1601]$4526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1602]$4528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1603]$4530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1604]$4532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1605]$4534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1606]$4536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1607]$4538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1608]$4540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1609]$4542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1610]$4544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1611]$4546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1612]$4548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1613]$4550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1614]$4552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1615]$4554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1616]$4556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1617]$4558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1618]$4560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1619]$4562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1620]$4564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1621]$4566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1622]$4568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1623]$4570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1624]$4572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1625]$4574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1626]$4576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1627]$4578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1628]$4580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1629]$4582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1630]$4584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1631]$4586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1632]$4588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1633]$4590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1634]$4592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1635]$4594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1636]$4596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1637]$4598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1638]$4600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1639]$4602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1640]$4604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1641]$4606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1642]$4608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1643]$4610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1644]$4612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1645]$4614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1646]$4616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1647]$4618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1648]$4620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1649]$4622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1650]$4624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1651]$4626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1652]$4628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1653]$4630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1654]$4632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1655]$4634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1656]$4636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1657]$4638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1658]$4640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1659]$4642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1660]$4644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1661]$4646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1662]$4648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1663]$4650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1664]$4652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1665]$4654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1666]$4656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1667]$4658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1668]$4660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1669]$4662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1670]$4664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1671]$4666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1672]$4668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1673]$4670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1674]$4672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1675]$4674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1676]$4676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1677]$4678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1678]$4680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1679]$4682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1680]$4684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1681]$4686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1682]$4688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1683]$4690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1684]$4692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1685]$4694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1686]$4696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1687]$4698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1688]$4700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1689]$4702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1690]$4704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1691]$4706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1692]$4708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1693]$4710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1694]$4712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1695]$4714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1696]$4716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1697]$4718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1698]$4720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1699]$4722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1700]$4724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1701]$4726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1702]$4728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1703]$4730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1704]$4732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1705]$4734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1706]$4736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1707]$4738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1708]$4740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1709]$4742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1710]$4744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1711]$4746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1712]$4748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1713]$4750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1714]$4752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1715]$4754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1716]$4756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1717]$4758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1718]$4760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1719]$4762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1720]$4764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1721]$4766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1722]$4768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1723]$4770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1724]$4772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1725]$4774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1726]$4776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1727]$4778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1728]$4780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1729]$4782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1730]$4784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1731]$4786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1732]$4788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1733]$4790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1734]$4792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1735]$4794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1736]$4796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1737]$4798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1738]$4800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1739]$4802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1740]$4804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1741]$4806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1742]$4808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1743]$4810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1744]$4812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1745]$4814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1746]$4816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1747]$4818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1748]$4820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1749]$4822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1750]$4824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1751]$4826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1752]$4828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1753]$4830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1754]$4832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1755]$4834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1756]$4836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1757]$4838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1758]$4840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1759]$4842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1760]$4844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1761]$4846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1762]$4848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1763]$4850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1764]$4852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1765]$4854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1766]$4856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1767]$4858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1768]$4860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1769]$4862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1770]$4864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1771]$4866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1772]$4868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1773]$4870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1774]$4872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1775]$4874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1776]$4876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1777]$4878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1778]$4880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1779]$4882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1780]$4884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1781]$4886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1782]$4888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1783]$4890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1784]$4892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1785]$4894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1786]$4896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1787]$4898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1788]$4900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1789]$4902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1790]$4904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1791]$4906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1792]$4908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1793]$4910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1794]$4912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1795]$4914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1796]$4916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1797]$4918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1798]$4920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1799]$4922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1800]$4924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1801]$4926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1802]$4928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1803]$4930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1804]$4932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1805]$4934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1806]$4936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1807]$4938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1808]$4940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1809]$4942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1810]$4944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1811]$4946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1812]$4948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1813]$4950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1814]$4952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1815]$4954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1816]$4956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1817]$4958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1818]$4960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1819]$4962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1820]$4964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1821]$4966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1822]$4968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1823]$4970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1824]$4972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1825]$4974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1826]$4976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1827]$4978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1828]$4980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1829]$4982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1830]$4984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1831]$4986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1832]$4988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1833]$4990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1834]$4992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1835]$4994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1836]$4996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1837]$4998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1838]$5000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1839]$5002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1840]$5004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1841]$5006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1842]$5008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1843]$5010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1844]$5012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1845]$5014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1846]$5016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1847]$5018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1848]$5020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1849]$5022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1850]$5024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1851]$5026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1852]$5028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1853]$5030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1854]$5032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1855]$5034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1856]$5036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1857]$5038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1858]$5040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1859]$5042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1860]$5044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1861]$5046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1862]$5048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1863]$5050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1864]$5052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1865]$5054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1866]$5056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1867]$5058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1868]$5060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1869]$5062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1870]$5064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1871]$5066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1872]$5068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1873]$5070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1874]$5072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1875]$5074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1876]$5076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1877]$5078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1878]$5080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1879]$5082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1880]$5084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1881]$5086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1882]$5088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1883]$5090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1884]$5092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1885]$5094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1886]$5096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1887]$5098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1888]$5100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1889]$5102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1890]$5104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1891]$5106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1892]$5108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1893]$5110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1894]$5112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1895]$5114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1896]$5116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1897]$5118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1898]$5120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1899]$5122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1900]$5124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1901]$5126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1902]$5128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1903]$5130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1904]$5132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1905]$5134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1906]$5136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1907]$5138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1908]$5140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1909]$5142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1910]$5144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1911]$5146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1912]$5148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1913]$5150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1914]$5152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1915]$5154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1916]$5156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1917]$5158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1918]$5160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1919]$5162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1920]$5164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1921]$5166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1922]$5168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1923]$5170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1924]$5172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1925]$5174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1926]$5176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1927]$5178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1928]$5180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1929]$5182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1930]$5184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1931]$5186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1932]$5188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1933]$5190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1934]$5192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1935]$5194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1936]$5196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1937]$5198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1938]$5200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1939]$5202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1940]$5204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1941]$5206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1942]$5208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1943]$5210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1944]$5212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1945]$5214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1946]$5216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1947]$5218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1948]$5220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1949]$5222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1950]$5224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1951]$5226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1952]$5228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1953]$5230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1954]$5232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1955]$5234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1956]$5236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1957]$5238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1958]$5240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1959]$5242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1960]$5244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1961]$5246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1962]$5248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1963]$5250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1964]$5252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1965]$5254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1966]$5256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1967]$5258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1968]$5260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1969]$5262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1970]$5264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1971]$5266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1972]$5268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1973]$5270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1974]$5272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1975]$5274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1976]$5276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1977]$5278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1978]$5280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1979]$5282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1980]$5284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1981]$5286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1982]$5288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1983]$5290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1984]$5292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1985]$5294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1986]$5296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1987]$5298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1988]$5300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1989]$5302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1990]$5304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1991]$5306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1992]$5308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1993]$5310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1994]$5312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1995]$5314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1996]$5316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1997]$5318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1998]$5320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[1999]$5322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2000]$5324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2001]$5326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2002]$5328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2003]$5330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2004]$5332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2005]$5334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2006]$5336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2007]$5338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2008]$5340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2009]$5342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2010]$5344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2011]$5346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2012]$5348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2013]$5350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2014]$5352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2015]$5354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2016]$5356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2017]$5358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2018]$5360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2019]$5362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2020]$5364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2021]$5366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2022]$5368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2023]$5370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2024]$5372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2025]$5374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2026]$5376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2027]$5378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2028]$5380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2029]$5382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2030]$5384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2031]$5386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2032]$5388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2033]$5390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2034]$5392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2035]$5394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2036]$5396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2037]$5398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2038]$5400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2039]$5402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2040]$5404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2041]$5406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2042]$5408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2043]$5410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2044]$5412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2045]$5414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2046]$5416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2047]$5418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2048]$5420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2049]$5422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2050]$5424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2051]$5426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2052]$5428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2053]$5430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2054]$5432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2055]$5434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2056]$5436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2057]$5438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2058]$5440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2059]$5442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2060]$5444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2061]$5446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2062]$5448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2063]$5450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2064]$5452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2065]$5454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2066]$5456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2067]$5458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2068]$5460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2069]$5462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2070]$5464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2071]$5466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2072]$5468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2073]$5470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2074]$5472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2075]$5474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2076]$5476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2077]$5478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2078]$5480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2079]$5482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2080]$5484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2081]$5486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2082]$5488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2083]$5490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2084]$5492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2085]$5494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2086]$5496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2087]$5498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2088]$5500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2089]$5502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2090]$5504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2091]$5506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2092]$5508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2093]$5510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2094]$5512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2095]$5514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2096]$5516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2097]$5518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2098]$5520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2099]$5522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2100]$5524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2101]$5526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2102]$5528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2103]$5530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2104]$5532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2105]$5534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2106]$5536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2107]$5538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2108]$5540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2109]$5542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2110]$5544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2111]$5546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2112]$5548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2113]$5550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2114]$5552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2115]$5554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2116]$5556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2117]$5558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2118]$5560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2119]$5562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2120]$5564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2121]$5566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2122]$5568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2123]$5570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2124]$5572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2125]$5574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2126]$5576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2127]$5578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2128]$5580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2129]$5582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2130]$5584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2131]$5586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2132]$5588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2133]$5590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2134]$5592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2135]$5594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2136]$5596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2137]$5598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2138]$5600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2139]$5602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2140]$5604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2141]$5606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2142]$5608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2143]$5610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2144]$5612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2145]$5614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2146]$5616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2147]$5618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2148]$5620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2149]$5622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2150]$5624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2151]$5626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2152]$5628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2153]$5630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2154]$5632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2155]$5634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2156]$5636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2157]$5638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2158]$5640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2159]$5642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2160]$5644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2161]$5646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2162]$5648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2163]$5650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2164]$5652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2165]$5654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2166]$5656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2167]$5658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2168]$5660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2169]$5662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2170]$5664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2171]$5666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2172]$5668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2173]$5670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2174]$5672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2175]$5674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2176]$5676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2177]$5678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2178]$5680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2179]$5682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2180]$5684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2181]$5686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2182]$5688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2183]$5690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2184]$5692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2185]$5694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2186]$5696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2187]$5698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2188]$5700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2189]$5702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2190]$5704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2191]$5706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2192]$5708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2193]$5710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2194]$5712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2195]$5714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2196]$5716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2197]$5718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2198]$5720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2199]$5722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2200]$5724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2201]$5726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2202]$5728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2203]$5730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2204]$5732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2205]$5734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2206]$5736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2207]$5738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2208]$5740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2209]$5742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2210]$5744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2211]$5746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2212]$5748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2213]$5750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2214]$5752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2215]$5754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2216]$5756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2217]$5758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2218]$5760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2219]$5762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2220]$5764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2221]$5766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2222]$5768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2223]$5770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2224]$5772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2225]$5774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2226]$5776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2227]$5778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2228]$5780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2229]$5782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2230]$5784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2231]$5786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2232]$5788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2233]$5790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2234]$5792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2235]$5794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2236]$5796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2237]$5798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2238]$5800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2239]$5802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2240]$5804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2241]$5806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2242]$5808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2243]$5810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2244]$5812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2245]$5814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2246]$5816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2247]$5818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2248]$5820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2249]$5822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2250]$5824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2251]$5826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2252]$5828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2253]$5830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2254]$5832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2255]$5834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2256]$5836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2257]$5838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2258]$5840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2259]$5842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2260]$5844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2261]$5846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2262]$5848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2263]$5850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2264]$5852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2265]$5854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2266]$5856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2267]$5858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2268]$5860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2269]$5862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2270]$5864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2271]$5866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2272]$5868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2273]$5870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2274]$5872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2275]$5874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2276]$5876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2277]$5878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2278]$5880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2279]$5882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2280]$5884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2281]$5886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2282]$5888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2283]$5890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2284]$5892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2285]$5894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2286]$5896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2287]$5898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2288]$5900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2289]$5902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2290]$5904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2291]$5906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2292]$5908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2293]$5910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2294]$5912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2295]$5914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2296]$5916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2297]$5918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2298]$5920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2299]$5922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2300]$5924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2301]$5926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2302]$5928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2303]$5930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2304]$5932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2305]$5934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2306]$5936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2307]$5938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2308]$5940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2309]$5942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2310]$5944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2311]$5946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2312]$5948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2313]$5950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2314]$5952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2315]$5954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2316]$5956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2317]$5958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2318]$5960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2319]$5962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2320]$5964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2321]$5966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2322]$5968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2323]$5970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2324]$5972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2325]$5974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2326]$5976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2327]$5978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2328]$5980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2329]$5982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2330]$5984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2331]$5986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2332]$5988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2333]$5990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2334]$5992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2335]$5994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2336]$5996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2337]$5998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2338]$6000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2339]$6002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2340]$6004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2341]$6006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2342]$6008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2343]$6010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2344]$6012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2345]$6014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2346]$6016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2347]$6018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2348]$6020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2349]$6022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2350]$6024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2351]$6026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2352]$6028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2353]$6030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2354]$6032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2355]$6034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2356]$6036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2357]$6038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2358]$6040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2359]$6042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2360]$6044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2361]$6046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2362]$6048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2363]$6050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2364]$6052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2365]$6054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2366]$6056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2367]$6058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2368]$6060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2369]$6062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2370]$6064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2371]$6066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2372]$6068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2373]$6070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2374]$6072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2375]$6074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2376]$6076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2377]$6078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2378]$6080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2379]$6082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2380]$6084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2381]$6086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2382]$6088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2383]$6090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2384]$6092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2385]$6094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2386]$6096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2387]$6098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2388]$6100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2389]$6102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2390]$6104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2391]$6106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2392]$6108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2393]$6110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2394]$6112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2395]$6114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2396]$6116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2397]$6118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2398]$6120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2399]$6122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2400]$6124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2401]$6126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2402]$6128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2403]$6130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2404]$6132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2405]$6134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2406]$6136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2407]$6138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2408]$6140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2409]$6142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2410]$6144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2411]$6146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2412]$6148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2413]$6150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2414]$6152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2415]$6154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2416]$6156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2417]$6158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2418]$6160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2419]$6162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2420]$6164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2421]$6166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2422]$6168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2423]$6170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2424]$6172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2425]$6174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2426]$6176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2427]$6178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2428]$6180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2429]$6182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2430]$6184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2431]$6186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2432]$6188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2433]$6190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2434]$6192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2435]$6194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2436]$6196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2437]$6198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2438]$6200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2439]$6202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2440]$6204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2441]$6206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2442]$6208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2443]$6210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2444]$6212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2445]$6214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2446]$6216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2447]$6218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2448]$6220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2449]$6222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2450]$6224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2451]$6226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2452]$6228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2453]$6230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2454]$6232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2455]$6234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2456]$6236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2457]$6238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2458]$6240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2459]$6242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2460]$6244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2461]$6246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2462]$6248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2463]$6250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2464]$6252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2465]$6254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2466]$6256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2467]$6258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2468]$6260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2469]$6262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2470]$6264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2471]$6266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2472]$6268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2473]$6270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2474]$6272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2475]$6274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2476]$6276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2477]$6278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2478]$6280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2479]$6282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2480]$6284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2481]$6286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2482]$6288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2483]$6290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2484]$6292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2485]$6294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2486]$6296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2487]$6298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2488]$6300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2489]$6302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2490]$6304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2491]$6306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2492]$6308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2493]$6310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2494]$6312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2495]$6314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2496]$6316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2497]$6318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2498]$6320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2499]$6322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2500]$6324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2501]$6326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2502]$6328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2503]$6330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2504]$6332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2505]$6334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2506]$6336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2507]$6338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2508]$6340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2509]$6342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2510]$6344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2511]$6346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2512]$6348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2513]$6350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2514]$6352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2515]$6354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2516]$6356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2517]$6358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2518]$6360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2519]$6362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2520]$6364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2521]$6366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2522]$6368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2523]$6370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2524]$6372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2525]$6374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2526]$6376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2527]$6378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2528]$6380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2529]$6382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2530]$6384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2531]$6386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2532]$6388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2533]$6390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2534]$6392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2535]$6394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2536]$6396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2537]$6398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2538]$6400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2539]$6402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2540]$6404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2541]$6406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2542]$6408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2543]$6410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2544]$6412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2545]$6414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2546]$6416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2547]$6418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2548]$6420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2549]$6422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2550]$6424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2551]$6426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2552]$6428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2553]$6430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2554]$6432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2555]$6434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2556]$6436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2557]$6438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2558]$6440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2559]$6442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2560]$6444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2561]$6446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2562]$6448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2563]$6450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2564]$6452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2565]$6454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2566]$6456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2567]$6458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2568]$6460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2569]$6462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2570]$6464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2571]$6466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2572]$6468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2573]$6470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2574]$6472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2575]$6474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2576]$6476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2577]$6478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2578]$6480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2579]$6482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2580]$6484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2581]$6486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2582]$6488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2583]$6490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2584]$6492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2585]$6494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2586]$6496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2587]$6498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2588]$6500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2589]$6502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2590]$6504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2591]$6506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2592]$6508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2593]$6510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2594]$6512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2595]$6514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2596]$6516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2597]$6518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2598]$6520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2599]$6522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2600]$6524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2601]$6526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2602]$6528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2603]$6530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2604]$6532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2605]$6534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2606]$6536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2607]$6538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2608]$6540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2609]$6542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2610]$6544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2611]$6546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2612]$6548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2613]$6550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2614]$6552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2615]$6554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2616]$6556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2617]$6558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2618]$6560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2619]$6562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2620]$6564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2621]$6566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2622]$6568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2623]$6570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2624]$6572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2625]$6574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2626]$6576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2627]$6578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2628]$6580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2629]$6582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2630]$6584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2631]$6586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2632]$6588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2633]$6590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2634]$6592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2635]$6594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2636]$6596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2637]$6598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2638]$6600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2639]$6602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2640]$6604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2641]$6606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2642]$6608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2643]$6610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2644]$6612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2645]$6614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2646]$6616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2647]$6618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2648]$6620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2649]$6622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2650]$6624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2651]$6626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2652]$6628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2653]$6630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2654]$6632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2655]$6634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2656]$6636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2657]$6638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2658]$6640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2659]$6642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2660]$6644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2661]$6646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2662]$6648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2663]$6650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2664]$6652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2665]$6654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2666]$6656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2667]$6658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2668]$6660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2669]$6662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2670]$6664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2671]$6666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2672]$6668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2673]$6670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2674]$6672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2675]$6674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2676]$6676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2677]$6678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2678]$6680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2679]$6682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2680]$6684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2681]$6686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2682]$6688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2683]$6690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2684]$6692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2685]$6694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2686]$6696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2687]$6698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2688]$6700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2689]$6702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2690]$6704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2691]$6706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2692]$6708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2693]$6710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2694]$6712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2695]$6714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2696]$6716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2697]$6718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2698]$6720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2699]$6722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2700]$6724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2701]$6726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2702]$6728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2703]$6730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2704]$6732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2705]$6734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2706]$6736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2707]$6738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2708]$6740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2709]$6742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2710]$6744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2711]$6746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2712]$6748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2713]$6750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2714]$6752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2715]$6754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2716]$6756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2717]$6758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2718]$6760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2719]$6762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2720]$6764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2721]$6766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2722]$6768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2723]$6770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2724]$6772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2725]$6774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2726]$6776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2727]$6778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2728]$6780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2729]$6782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2730]$6784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2731]$6786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2732]$6788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2733]$6790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2734]$6792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2735]$6794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2736]$6796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2737]$6798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2738]$6800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2739]$6802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2740]$6804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2741]$6806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2742]$6808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2743]$6810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2744]$6812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2745]$6814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2746]$6816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2747]$6818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2748]$6820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2749]$6822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2750]$6824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2751]$6826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2752]$6828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2753]$6830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2754]$6832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2755]$6834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2756]$6836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2757]$6838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2758]$6840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2759]$6842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2760]$6844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2761]$6846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2762]$6848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2763]$6850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2764]$6852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2765]$6854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2766]$6856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2767]$6858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2768]$6860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2769]$6862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2770]$6864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2771]$6866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2772]$6868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2773]$6870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2774]$6872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2775]$6874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2776]$6876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2777]$6878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2778]$6880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2779]$6882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2780]$6884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2781]$6886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2782]$6888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2783]$6890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2784]$6892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2785]$6894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2786]$6896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2787]$6898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2788]$6900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2789]$6902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2790]$6904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2791]$6906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2792]$6908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2793]$6910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2794]$6912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2795]$6914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2796]$6916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2797]$6918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2798]$6920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2799]$6922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2800]$6924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2801]$6926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2802]$6928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2803]$6930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2804]$6932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2805]$6934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2806]$6936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2807]$6938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2808]$6940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2809]$6942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2810]$6944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2811]$6946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2812]$6948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2813]$6950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2814]$6952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2815]$6954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2816]$6956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2817]$6958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2818]$6960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2819]$6962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2820]$6964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2821]$6966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2822]$6968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2823]$6970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2824]$6972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2825]$6974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2826]$6976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2827]$6978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2828]$6980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2829]$6982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2830]$6984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2831]$6986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2832]$6988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2833]$6990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2834]$6992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2835]$6994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2836]$6996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2837]$6998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2838]$7000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2839]$7002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2840]$7004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2841]$7006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2842]$7008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2843]$7010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2844]$7012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2845]$7014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2846]$7016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2847]$7018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2848]$7020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2849]$7022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2850]$7024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2851]$7026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2852]$7028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2853]$7030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2854]$7032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2855]$7034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2856]$7036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2857]$7038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2858]$7040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2859]$7042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2860]$7044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2861]$7046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2862]$7048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2863]$7050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2864]$7052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2865]$7054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2866]$7056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2867]$7058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2868]$7060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2869]$7062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2870]$7064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2871]$7066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2872]$7068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2873]$7070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2874]$7072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2875]$7074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2876]$7076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2877]$7078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2878]$7080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2879]$7082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2880]$7084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2881]$7086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2882]$7088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2883]$7090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2884]$7092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2885]$7094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2886]$7096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2887]$7098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2888]$7100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2889]$7102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2890]$7104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2891]$7106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2892]$7108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2893]$7110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2894]$7112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2895]$7114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2896]$7116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2897]$7118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2898]$7120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2899]$7122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2900]$7124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2901]$7126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2902]$7128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2903]$7130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2904]$7132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2905]$7134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2906]$7136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2907]$7138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2908]$7140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2909]$7142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2910]$7144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2911]$7146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2912]$7148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2913]$7150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2914]$7152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2915]$7154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2916]$7156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2917]$7158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2918]$7160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2919]$7162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2920]$7164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2921]$7166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2922]$7168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2923]$7170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2924]$7172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2925]$7174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2926]$7176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2927]$7178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2928]$7180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2929]$7182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2930]$7184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2931]$7186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2932]$7188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2933]$7190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2934]$7192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2935]$7194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2936]$7196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2937]$7198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2938]$7200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2939]$7202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2940]$7204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2941]$7206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2942]$7208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2943]$7210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2944]$7212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2945]$7214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2946]$7216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2947]$7218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2948]$7220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2949]$7222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2950]$7224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2951]$7226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2952]$7228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2953]$7230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2954]$7232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2955]$7234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2956]$7236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2957]$7238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2958]$7240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2959]$7242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2960]$7244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2961]$7246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2962]$7248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2963]$7250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2964]$7252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2965]$7254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2966]$7256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2967]$7258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2968]$7260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2969]$7262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2970]$7264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2971]$7266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2972]$7268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2973]$7270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2974]$7272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2975]$7274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2976]$7276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2977]$7278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2978]$7280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2979]$7282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2980]$7284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2981]$7286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2982]$7288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2983]$7290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2984]$7292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2985]$7294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2986]$7296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2987]$7298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2988]$7300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2989]$7302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2990]$7304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2991]$7306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2992]$7308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2993]$7310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2994]$7312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2995]$7314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2996]$7316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2997]$7318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2998]$7320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[2999]$7322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3000]$7324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3001]$7326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3002]$7328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3003]$7330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3004]$7332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3005]$7334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3006]$7336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3007]$7338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3008]$7340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3009]$7342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3010]$7344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3011]$7346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3012]$7348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3013]$7350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3014]$7352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3015]$7354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3016]$7356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3017]$7358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3018]$7360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3019]$7362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3020]$7364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3021]$7366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3022]$7368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3023]$7370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3024]$7372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3025]$7374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3026]$7376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3027]$7378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3028]$7380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3029]$7382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3030]$7384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3031]$7386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3032]$7388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3033]$7390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3034]$7392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3035]$7394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3036]$7396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3037]$7398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3038]$7400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3039]$7402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3040]$7404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3041]$7406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3042]$7408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3043]$7410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3044]$7412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3045]$7414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3046]$7416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3047]$7418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3048]$7420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3049]$7422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3050]$7424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3051]$7426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3052]$7428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3053]$7430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3054]$7432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3055]$7434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3056]$7436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3057]$7438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3058]$7440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3059]$7442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3060]$7444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3061]$7446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3062]$7448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3063]$7450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3064]$7452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3065]$7454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3066]$7456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3067]$7458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3068]$7460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3069]$7462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3070]$7464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3071]$7466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3072]$7468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3073]$7470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3074]$7472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3075]$7474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3076]$7476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3077]$7478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3078]$7480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3079]$7482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3080]$7484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3081]$7486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3082]$7488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3083]$7490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3084]$7492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3085]$7494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3086]$7496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3087]$7498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3088]$7500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3089]$7502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3090]$7504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3091]$7506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3092]$7508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3093]$7510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3094]$7512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3095]$7514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3096]$7516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3097]$7518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3098]$7520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3099]$7522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3100]$7524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3101]$7526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3102]$7528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3103]$7530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3104]$7532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3105]$7534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3106]$7536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3107]$7538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3108]$7540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3109]$7542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3110]$7544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3111]$7546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3112]$7548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3113]$7550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3114]$7552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3115]$7554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3116]$7556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3117]$7558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3118]$7560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3119]$7562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3120]$7564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3121]$7566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3122]$7568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3123]$7570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3124]$7572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3125]$7574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3126]$7576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3127]$7578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3128]$7580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3129]$7582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3130]$7584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3131]$7586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3132]$7588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3133]$7590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3134]$7592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3135]$7594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3136]$7596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3137]$7598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3138]$7600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3139]$7602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3140]$7604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3141]$7606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3142]$7608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3143]$7610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3144]$7612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3145]$7614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3146]$7616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3147]$7618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3148]$7620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3149]$7622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3150]$7624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3151]$7626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3152]$7628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3153]$7630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3154]$7632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3155]$7634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3156]$7636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3157]$7638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3158]$7640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3159]$7642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3160]$7644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3161]$7646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3162]$7648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3163]$7650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3164]$7652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3165]$7654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3166]$7656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3167]$7658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3168]$7660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3169]$7662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3170]$7664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3171]$7666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3172]$7668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3173]$7670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3174]$7672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3175]$7674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3176]$7676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3177]$7678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3178]$7680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3179]$7682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3180]$7684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3181]$7686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3182]$7688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3183]$7690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3184]$7692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3185]$7694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3186]$7696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3187]$7698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3188]$7700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3189]$7702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3190]$7704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3191]$7706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3192]$7708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3193]$7710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3194]$7712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3195]$7714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3196]$7716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3197]$7718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3198]$7720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3199]$7722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3200]$7724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3201]$7726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3202]$7728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3203]$7730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3204]$7732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3205]$7734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3206]$7736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3207]$7738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3208]$7740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3209]$7742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3210]$7744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3211]$7746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3212]$7748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3213]$7750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3214]$7752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3215]$7754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3216]$7756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3217]$7758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3218]$7760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3219]$7762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3220]$7764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3221]$7766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3222]$7768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3223]$7770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3224]$7772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3225]$7774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3226]$7776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3227]$7778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3228]$7780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3229]$7782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3230]$7784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3231]$7786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3232]$7788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3233]$7790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3234]$7792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3235]$7794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3236]$7796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3237]$7798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3238]$7800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3239]$7802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3240]$7804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3241]$7806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3242]$7808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3243]$7810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3244]$7812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3245]$7814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3246]$7816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3247]$7818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3248]$7820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3249]$7822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3250]$7824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3251]$7826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3252]$7828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3253]$7830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3254]$7832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3255]$7834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3256]$7836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3257]$7838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3258]$7840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3259]$7842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3260]$7844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3261]$7846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3262]$7848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3263]$7850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3264]$7852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3265]$7854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3266]$7856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3267]$7858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3268]$7860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3269]$7862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3270]$7864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3271]$7866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3272]$7868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3273]$7870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3274]$7872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3275]$7874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3276]$7876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3277]$7878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3278]$7880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3279]$7882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3280]$7884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3281]$7886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3282]$7888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3283]$7890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3284]$7892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3285]$7894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3286]$7896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3287]$7898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3288]$7900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3289]$7902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3290]$7904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3291]$7906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3292]$7908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3293]$7910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3294]$7912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3295]$7914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3296]$7916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3297]$7918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3298]$7920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3299]$7922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3300]$7924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3301]$7926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3302]$7928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3303]$7930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3304]$7932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3305]$7934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3306]$7936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3307]$7938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3308]$7940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3309]$7942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3310]$7944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3311]$7946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3312]$7948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3313]$7950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3314]$7952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3315]$7954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3316]$7956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3317]$7958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3318]$7960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3319]$7962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3320]$7964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3321]$7966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3322]$7968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3323]$7970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3324]$7972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3325]$7974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3326]$7976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3327]$7978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3328]$7980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3329]$7982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3330]$7984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3331]$7986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3332]$7988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3333]$7990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3334]$7992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3335]$7994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3336]$7996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3337]$7998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3338]$8000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3339]$8002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3340]$8004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3341]$8006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3342]$8008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3343]$8010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3344]$8012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3345]$8014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3346]$8016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3347]$8018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3348]$8020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3349]$8022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3350]$8024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3351]$8026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3352]$8028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3353]$8030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3354]$8032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3355]$8034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3356]$8036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3357]$8038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3358]$8040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3359]$8042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3360]$8044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3361]$8046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3362]$8048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3363]$8050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3364]$8052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3365]$8054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3366]$8056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3367]$8058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3368]$8060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3369]$8062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3370]$8064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3371]$8066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3372]$8068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3373]$8070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3374]$8072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3375]$8074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3376]$8076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3377]$8078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3378]$8080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3379]$8082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3380]$8084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3381]$8086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3382]$8088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3383]$8090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3384]$8092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3385]$8094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3386]$8096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3387]$8098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3388]$8100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3389]$8102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3390]$8104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3391]$8106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3392]$8108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3393]$8110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3394]$8112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3395]$8114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3396]$8116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3397]$8118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3398]$8120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3399]$8122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3400]$8124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3401]$8126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3402]$8128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3403]$8130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3404]$8132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3405]$8134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3406]$8136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3407]$8138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3408]$8140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3409]$8142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3410]$8144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3411]$8146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3412]$8148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3413]$8150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3414]$8152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3415]$8154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3416]$8156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3417]$8158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3418]$8160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3419]$8162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3420]$8164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3421]$8166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3422]$8168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3423]$8170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3424]$8172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3425]$8174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3426]$8176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3427]$8178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3428]$8180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3429]$8182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3430]$8184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3431]$8186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3432]$8188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3433]$8190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3434]$8192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3435]$8194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3436]$8196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3437]$8198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3438]$8200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3439]$8202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3440]$8204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3441]$8206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3442]$8208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3443]$8210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3444]$8212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3445]$8214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3446]$8216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3447]$8218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3448]$8220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3449]$8222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3450]$8224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3451]$8226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3452]$8228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3453]$8230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3454]$8232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3455]$8234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3456]$8236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3457]$8238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3458]$8240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3459]$8242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3460]$8244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3461]$8246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3462]$8248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3463]$8250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3464]$8252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3465]$8254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3466]$8256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3467]$8258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3468]$8260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3469]$8262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3470]$8264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3471]$8266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3472]$8268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3473]$8270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3474]$8272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3475]$8274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3476]$8276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3477]$8278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3478]$8280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3479]$8282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3480]$8284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3481]$8286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3482]$8288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3483]$8290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3484]$8292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3485]$8294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3486]$8296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3487]$8298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3488]$8300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3489]$8302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3490]$8304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3491]$8306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3492]$8308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3493]$8310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3494]$8312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3495]$8314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3496]$8316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3497]$8318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3498]$8320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3499]$8322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3500]$8324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3501]$8326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3502]$8328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3503]$8330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3504]$8332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3505]$8334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3506]$8336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3507]$8338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3508]$8340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3509]$8342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3510]$8344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3511]$8346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3512]$8348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3513]$8350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3514]$8352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3515]$8354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3516]$8356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3517]$8358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3518]$8360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3519]$8362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3520]$8364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3521]$8366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3522]$8368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3523]$8370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3524]$8372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3525]$8374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3526]$8376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3527]$8378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3528]$8380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3529]$8382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3530]$8384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3531]$8386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3532]$8388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3533]$8390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3534]$8392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3535]$8394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3536]$8396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3537]$8398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3538]$8400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3539]$8402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3540]$8404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3541]$8406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3542]$8408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3543]$8410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3544]$8412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3545]$8414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3546]$8416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3547]$8418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3548]$8420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3549]$8422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3550]$8424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3551]$8426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3552]$8428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3553]$8430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3554]$8432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3555]$8434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3556]$8436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3557]$8438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3558]$8440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3559]$8442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3560]$8444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3561]$8446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3562]$8448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3563]$8450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3564]$8452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3565]$8454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3566]$8456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3567]$8458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3568]$8460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3569]$8462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3570]$8464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3571]$8466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3572]$8468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3573]$8470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3574]$8472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3575]$8474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3576]$8476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3577]$8478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3578]$8480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3579]$8482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3580]$8484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3581]$8486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3582]$8488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3583]$8490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3584]$8492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3585]$8494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3586]$8496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3587]$8498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3588]$8500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3589]$8502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3590]$8504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3591]$8506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3592]$8508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3593]$8510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3594]$8512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3595]$8514 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3596]$8516 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3597]$8518 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3598]$8520 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3599]$8522 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3600]$8524 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3601]$8526 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3602]$8528 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3603]$8530 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3604]$8532 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3605]$8534 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3606]$8536 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3607]$8538 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3608]$8540 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3609]$8542 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3610]$8544 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3611]$8546 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3612]$8548 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3613]$8550 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3614]$8552 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3615]$8554 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3616]$8556 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3617]$8558 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3618]$8560 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3619]$8562 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3620]$8564 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3621]$8566 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3622]$8568 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3623]$8570 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3624]$8572 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3625]$8574 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3626]$8576 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3627]$8578 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3628]$8580 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3629]$8582 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3630]$8584 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3631]$8586 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3632]$8588 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3633]$8590 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3634]$8592 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3635]$8594 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3636]$8596 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3637]$8598 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3638]$8600 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3639]$8602 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3640]$8604 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3641]$8606 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3642]$8608 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3643]$8610 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3644]$8612 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3645]$8614 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3646]$8616 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3647]$8618 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3648]$8620 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3649]$8622 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3650]$8624 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3651]$8626 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3652]$8628 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3653]$8630 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3654]$8632 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3655]$8634 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3656]$8636 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3657]$8638 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3658]$8640 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3659]$8642 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3660]$8644 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3661]$8646 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3662]$8648 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3663]$8650 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3664]$8652 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3665]$8654 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3666]$8656 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3667]$8658 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3668]$8660 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3669]$8662 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3670]$8664 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3671]$8666 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3672]$8668 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3673]$8670 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3674]$8672 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3675]$8674 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3676]$8676 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3677]$8678 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3678]$8680 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3679]$8682 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3680]$8684 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3681]$8686 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3682]$8688 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3683]$8690 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3684]$8692 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3685]$8694 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3686]$8696 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3687]$8698 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3688]$8700 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3689]$8702 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3690]$8704 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3691]$8706 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3692]$8708 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3693]$8710 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3694]$8712 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3695]$8714 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3696]$8716 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3697]$8718 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3698]$8720 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3699]$8722 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3700]$8724 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3701]$8726 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3702]$8728 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3703]$8730 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3704]$8732 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3705]$8734 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3706]$8736 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3707]$8738 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3708]$8740 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3709]$8742 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3710]$8744 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3711]$8746 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3712]$8748 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3713]$8750 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3714]$8752 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3715]$8754 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3716]$8756 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3717]$8758 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3718]$8760 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3719]$8762 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3720]$8764 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3721]$8766 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3722]$8768 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3723]$8770 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3724]$8772 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3725]$8774 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3726]$8776 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3727]$8778 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3728]$8780 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3729]$8782 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3730]$8784 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3731]$8786 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3732]$8788 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3733]$8790 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3734]$8792 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3735]$8794 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3736]$8796 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3737]$8798 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3738]$8800 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3739]$8802 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3740]$8804 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3741]$8806 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3742]$8808 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3743]$8810 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3744]$8812 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3745]$8814 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3746]$8816 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3747]$8818 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3748]$8820 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3749]$8822 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3750]$8824 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3751]$8826 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3752]$8828 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3753]$8830 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3754]$8832 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3755]$8834 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3756]$8836 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3757]$8838 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3758]$8840 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3759]$8842 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3760]$8844 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3761]$8846 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3762]$8848 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3763]$8850 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3764]$8852 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3765]$8854 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3766]$8856 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3767]$8858 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3768]$8860 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3769]$8862 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3770]$8864 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3771]$8866 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3772]$8868 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3773]$8870 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3774]$8872 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3775]$8874 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3776]$8876 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3777]$8878 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3778]$8880 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3779]$8882 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3780]$8884 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3781]$8886 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3782]$8888 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3783]$8890 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3784]$8892 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3785]$8894 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3786]$8896 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3787]$8898 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3788]$8900 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3789]$8902 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3790]$8904 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3791]$8906 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3792]$8908 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3793]$8910 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3794]$8912 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3795]$8914 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3796]$8916 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3797]$8918 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3798]$8920 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3799]$8922 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3800]$8924 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3801]$8926 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3802]$8928 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3803]$8930 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3804]$8932 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3805]$8934 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3806]$8936 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3807]$8938 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3808]$8940 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3809]$8942 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3810]$8944 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3811]$8946 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3812]$8948 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3813]$8950 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3814]$8952 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3815]$8954 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3816]$8956 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3817]$8958 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3818]$8960 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3819]$8962 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3820]$8964 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3821]$8966 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3822]$8968 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3823]$8970 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3824]$8972 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3825]$8974 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3826]$8976 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3827]$8978 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3828]$8980 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3829]$8982 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3830]$8984 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3831]$8986 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3832]$8988 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3833]$8990 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3834]$8992 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3835]$8994 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3836]$8996 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3837]$8998 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3838]$9000 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3839]$9002 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3840]$9004 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3841]$9006 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3842]$9008 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3843]$9010 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3844]$9012 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3845]$9014 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3846]$9016 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3847]$9018 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3848]$9020 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3849]$9022 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3850]$9024 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3851]$9026 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3852]$9028 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3853]$9030 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3854]$9032 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3855]$9034 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3856]$9036 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3857]$9038 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3858]$9040 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3859]$9042 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3860]$9044 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3861]$9046 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3862]$9048 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3863]$9050 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3864]$9052 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3865]$9054 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3866]$9056 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3867]$9058 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3868]$9060 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3869]$9062 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3870]$9064 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3871]$9066 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3872]$9068 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3873]$9070 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3874]$9072 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3875]$9074 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3876]$9076 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3877]$9078 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3878]$9080 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3879]$9082 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3880]$9084 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3881]$9086 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3882]$9088 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3883]$9090 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3884]$9092 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3885]$9094 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3886]$9096 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3887]$9098 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3888]$9100 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3889]$9102 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3890]$9104 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3891]$9106 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3892]$9108 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3893]$9110 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3894]$9112 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3895]$9114 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3896]$9116 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3897]$9118 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3898]$9120 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3899]$9122 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3900]$9124 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3901]$9126 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3902]$9128 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3903]$9130 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3904]$9132 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3905]$9134 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3906]$9136 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3907]$9138 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3908]$9140 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3909]$9142 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3910]$9144 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3911]$9146 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3912]$9148 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3913]$9150 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3914]$9152 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3915]$9154 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3916]$9156 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3917]$9158 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3918]$9160 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3919]$9162 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3920]$9164 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3921]$9166 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3922]$9168 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3923]$9170 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3924]$9172 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3925]$9174 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3926]$9176 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3927]$9178 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3928]$9180 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3929]$9182 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3930]$9184 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3931]$9186 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3932]$9188 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3933]$9190 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3934]$9192 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3935]$9194 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3936]$9196 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3937]$9198 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3938]$9200 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3939]$9202 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3940]$9204 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3941]$9206 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3942]$9208 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3943]$9210 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3944]$9212 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3945]$9214 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3946]$9216 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3947]$9218 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3948]$9220 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3949]$9222 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3950]$9224 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3951]$9226 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3952]$9228 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3953]$9230 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3954]$9232 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3955]$9234 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3956]$9236 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3957]$9238 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3958]$9240 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3959]$9242 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3960]$9244 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3961]$9246 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3962]$9248 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3963]$9250 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3964]$9252 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3965]$9254 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3966]$9256 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3967]$9258 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3968]$9260 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3969]$9262 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3970]$9264 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3971]$9266 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3972]$9268 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3973]$9270 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3974]$9272 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3975]$9274 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3976]$9276 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3977]$9278 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3978]$9280 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3979]$9282 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3980]$9284 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3981]$9286 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3982]$9288 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3983]$9290 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3984]$9292 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3985]$9294 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3986]$9296 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3987]$9298 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3988]$9300 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3989]$9302 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3990]$9304 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3991]$9306 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3992]$9308 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3993]$9310 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3994]$9312 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3995]$9314 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3996]$9316 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3997]$9318 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3998]$9320 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[3999]$9322 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4000]$9324 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4001]$9326 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4002]$9328 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4003]$9330 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4004]$9332 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4005]$9334 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4006]$9336 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4007]$9338 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4008]$9340 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4009]$9342 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4010]$9344 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4011]$9346 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4012]$9348 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4013]$9350 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4014]$9352 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4015]$9354 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4016]$9356 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4017]$9358 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4018]$9360 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4019]$9362 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4020]$9364 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4021]$9366 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4022]$9368 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4023]$9370 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4024]$9372 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4025]$9374 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4026]$9376 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4027]$9378 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4028]$9380 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4029]$9382 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4030]$9384 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4031]$9386 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4032]$9388 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4033]$9390 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4034]$9392 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4035]$9394 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4036]$9396 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4037]$9398 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4038]$9400 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4039]$9402 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4040]$9404 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4041]$9406 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4042]$9408 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4043]$9410 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4044]$9412 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4045]$9414 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4046]$9416 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4047]$9418 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4048]$9420 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4049]$9422 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4050]$9424 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4051]$9426 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4052]$9428 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4053]$9430 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4054]$9432 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4055]$9434 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4056]$9436 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4057]$9438 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4058]$9440 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4059]$9442 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4060]$9444 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4061]$9446 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4062]$9448 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4063]$9450 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4064]$9452 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4065]$9454 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4066]$9456 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4067]$9458 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4068]$9460 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4069]$9462 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4070]$9464 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4071]$9466 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4072]$9468 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4073]$9470 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4074]$9472 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4075]$9474 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4076]$9476 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4077]$9478 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4078]$9480 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4079]$9482 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4080]$9484 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4081]$9486 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4082]$9488 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4083]$9490 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4084]$9492 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4085]$9494 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4086]$9496 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4087]$9498 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4088]$9500 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4089]$9502 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4090]$9504 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4091]$9506 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4092]$9508 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4093]$9510 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4094]$9512 ($dff) from module instruction_memory (removing D path).
Handling const CLK on $memory\instruction_memory[4095]$9514 ($dff) from module instruction_memory (removing D path).

19.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8194 unused wires.
<suppressed ~2 debug messages>

19.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~4052 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.26.9. Rerunning OPT passes. (Maybe there is more to do..)

19.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

19.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][2]$15663:
      Old ports: A=32'11111110000000010000000100010011, B=8465955, Y=$memory\instruction_memory$rdmux[0][10][1]$a$12589
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][10][1]$a$12589 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31:6] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [3:0] } = { $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5] 9'000000100 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5:4] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][1]$15660:
      Old ports: A=1073807635, B=4194415, Y=$memory\instruction_memory$rdmux[0][10][0]$b$12587
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][0]$b$12587 [31:5] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [3] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [1:0] } = { 1'0 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] 7'0000000 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] 5'00000 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] 7'0000000 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] 1'0 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][10]$15687:
      Old ports: A=32'11111110111001111101010011100011, B=32'11111110010001000010011110000011, Y=$memory\instruction_memory$rdmux[0][10][5]$a$12601
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][10][5]$a$12601 [8] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][10][5]$a$12601 [31:9] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [7:6] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [4:0] } = { 8'11111110 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] 1'1 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] 3'001 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [8] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] 2'01 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [8] 1'1 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][8]$15681:
      Old ports: A=32'11111110111101000010011000100011, B=32'11111110110001000010011100000011, Y=$memory\instruction_memory$rdmux[0][10][4]$a$12598
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][10][4]$a$12598 [8] $memory\instruction_memory$rdmux[0][10][4]$a$12598 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][10][4]$a$12598 [31:9] $memory\instruction_memory$rdmux[0][10][4]$a$12598 [7:6] $memory\instruction_memory$rdmux[0][10][4]$a$12598 [4:0] } = { 10'1111111011 $memory\instruction_memory$rdmux[0][10][4]$a$12598 [5] $memory\instruction_memory$rdmux[0][10][4]$a$12598 [5] 18'010000100110000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][9]$15684:
      Old ports: A=403383, B=32'10100111111101111000011110010011, Y=$memory\instruction_memory$rdmux[0][10][4]$b$12599
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][4]$b$12599 [31:16] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [14:3] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [1:0] } = { $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] 1'0 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] 2'00 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] 3'011 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] 1'0 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] 7'0011110 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][4]$15669:
      Old ports: A=32'11111110111101000010001000100011, B=32'11111110010001000010011110000011, Y=$memory\instruction_memory$rdmux[0][10][2]$a$12592
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][10][2]$a$12592 [7] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] }
      New connections: { $memory\instruction_memory$rdmux[0][10][2]$a$12592 [31:8] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [6] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [4:0] } = { 8'11111110 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] 1'1 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] 9'010000100 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [7] 1'1 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [7] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][14]$15699:
      Old ports: A=32'11111110100001000010011100000011, B=403383, Y=$memory\instruction_memory$rdmux[0][10][7]$a$12607
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][7]$a$12607 [31:24] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [22:3] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [1:0] } = { $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] 6'000001 $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] 9'000100111 $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] 1'0 $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][15]$15702:
      Old ports: A=32'10100111111101111000011110010011, B=32'11111110111001111101010011100011, Y=$memory\instruction_memory$rdmux[0][10][7]$b$12608
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][10][7]$b$12608 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][10][7]$b$12608 [31:6] $memory\instruction_memory$rdmux[0][10][7]$b$12608 [3:0] } = { 1'1 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 1'1 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 2'11 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] 3'111 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] 5'01111 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 1'0 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 2'01 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] 1'1 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][3]$15666:
      Old ports: A=33621011, B=10167, Y=$memory\instruction_memory$rdmux[0][10][1]$b$12590
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][1]$b$12590 [16] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][1]$b$12590 [31:17] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [15:3] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [1:0] } = { 6'000000 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [16] 10'0000000000 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] 3'001 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] 1'0 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][0]$15657:
      Old ports: A=19, B=4407, Y=$memory\instruction_memory$rdmux[0][10][0]$a$12586
      New ports: A=1'0, B=1'1, Y=$memory\instruction_memory$rdmux[0][10][0]$a$12586 [2]
      New connections: { $memory\instruction_memory$rdmux[0][10][0]$a$12586 [31:3] $memory\instruction_memory$rdmux[0][10][0]$a$12586 [1:0] } = { 19'0000000000000000000 $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] 3'000 $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] 2'00 $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] 4'1011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][16]$15705:
      Old ports: A=32'11111010010111111111000001101111, B=0, Y=$memory\instruction_memory$rdmux[0][10][8]$a$12610
      New ports: A=1'1, B=1'0, Y=$memory\instruction_memory$rdmux[0][10][8]$a$12610 [0]
      New connections: $memory\instruction_memory$rdmux[0][10][8]$a$12610 [31:1] = { $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] 1'0 $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] 2'00 $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] 1'0 $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] 5'00000 $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] 1'0 $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] $memory\instruction_memory$rdmux[0][10][8]$a$12610 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][6]$15675:
      Old ports: A=32'11111110000001000010011000100011, B=16777327, Y=$memory\instruction_memory$rdmux[0][10][3]$a$12595
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][3]$a$12595 [31:10] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [8:3] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [1:0] } = { $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [2] 5'00000 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] 4'0000 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] 2'00 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] 2'00 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [2] 2'10 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][13]$15696:
      Old ports: A=1542035, B=32'11111110111101000010010000100011, Y=$memory\instruction_memory$rdmux[0][10][6]$b$12605
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][10][6]$b$12605 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][10][6]$b$12605 [31:6] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [3:0] } = { $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] 1'0 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] 3'101 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] 1'0 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] 3'001 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][5]$15672:
      Old ports: A=267388691, B=15179811, Y=$memory\instruction_memory$rdmux[0][10][2]$b$12593
      New ports: A=2'01, B=2'10, Y=$memory\instruction_memory$rdmux[0][10][2]$b$12593 [5:4]
      New connections: { $memory\instruction_memory$rdmux[0][10][2]$b$12593 [31:6] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [3:0] } = { 4'0000 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] 3'111 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] 1'0 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] 1'0 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] 2'00 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] 6'000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][7]$15678:
      Old ports: A=32'11111110110001000010011110000011, B=1542035, Y=$memory\instruction_memory$rdmux[0][10][3]$b$12596
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] }
      New connections: { $memory\instruction_memory$rdmux[0][10][3]$b$12596 [31:14] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [12:5] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [3:0] } = { $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] 1'0 $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] 1'0 $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] 2'01 $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] 13'0001111000011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][11]$15690:
      Old ports: A=499747, B=32'11111110000001000010010000100011, Y=$memory\instruction_memory$rdmux[0][10][5]$b$12602
      New ports: A=2'10, B=2'01, Y={ $memory\instruction_memory$rdmux[0][10][5]$b$12602 [15] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] }
      New connections: { $memory\instruction_memory$rdmux[0][10][5]$b$12602 [31:16] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [14:11] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [9:0] } = { $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] 7'0000001 $memory\instruction_memory$rdmux[0][10][5]$b$12602 [15] $memory\instruction_memory$rdmux[0][10][5]$b$12602 [15] 14'01000000100011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][11][12]$15693:
      Old ports: A=16777327, B=32'11111110100001000010011110000011, Y=$memory\instruction_memory$rdmux[0][10][6]$a$12604
      New ports: A=2'01, B=2'10, Y={ $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][10][6]$a$12604 [31:8] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [6:3] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [1:0] } = { $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] 4'0000 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] 4'0000 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] 2'00 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] 1'0 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] 2'11 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][5]$12600:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][5]$a$12601, B=$memory\instruction_memory$rdmux[0][10][5]$b$12602, Y=$memory\instruction_memory$rdmux[0][9][2]$b$11057
      New ports: A={ $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [8] 1'1 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [8] 1'1 $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] $memory\instruction_memory$rdmux[0][10][5]$a$12601 [5] }, B={ $memory\instruction_memory$rdmux[0][10][5]$b$12602 [15] 1'1 $memory\instruction_memory$rdmux[0][10][5]$b$12602 [10] 4'0001 }, Y={ $memory\instruction_memory$rdmux[0][9][2]$b$11057 [15] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [13] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [8:5] }
      New connections: { $memory\instruction_memory$rdmux[0][9][2]$b$11057 [31:16] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [14] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [12:11] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [9] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [4:0] } = { $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] 1'0 $memory\instruction_memory$rdmux[0][9][2]$b$11057 [6] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [7:6] 3'001 $memory\instruction_memory$rdmux[0][9][2]$b$11057 [15] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [15] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [6] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [6] 1'0 $memory\instruction_memory$rdmux[0][9][2]$b$11057 [8] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][3]$12594:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][3]$a$12595, B=$memory\instruction_memory$rdmux[0][10][3]$b$12596, Y=$memory\instruction_memory$rdmux[0][9][1]$b$11054
      New ports: A={ 1'0 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] $memory\instruction_memory$rdmux[0][10][3]$a$12595 [9] 3'010 $memory\instruction_memory$rdmux[0][10][3]$a$12595 [2] }, B={ $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] $memory\instruction_memory$rdmux[0][10][3]$b$12596 [13] 3'110 $memory\instruction_memory$rdmux[0][10][3]$b$12596 [4] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][1]$b$11054 [22] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [7] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [5:4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][1]$b$11054 [31:23] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [21:14] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [12:10] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [8] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [6] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [3] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [1:0] } = { $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [22] 1'0 $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] 1'0 $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] 3'000 $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [7] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][2]$12591:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][2]$a$12592, B=$memory\instruction_memory$rdmux[0][10][2]$b$12593, Y=$memory\instruction_memory$rdmux[0][9][1]$a$11053
      New ports: A={ 1'1 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] 3'011 $memory\instruction_memory$rdmux[0][10][2]$a$12592 [7] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [7] $memory\instruction_memory$rdmux[0][10][2]$a$12592 [5] 1'0 }, B={ 2'01 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5:4] $memory\instruction_memory$rdmux[0][10][2]$b$12593 [4] 1'0 $memory\instruction_memory$rdmux[0][10][2]$b$12593 [5:4] }, Y={ $memory\instruction_memory$rdmux[0][9][1]$a$11053 [28] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [21:20] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [15] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [13] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9:7] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [5:4] }
      New connections: { $memory\instruction_memory$rdmux[0][9][1]$a$11053 [31:29] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [27:22] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [19:16] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [14] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [12:10] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [6] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [3:0] } = { $memory\instruction_memory$rdmux[0][9][1]$a$11053 [28] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [28] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [28] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [4] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [21] 2'10 $memory\instruction_memory$rdmux[0][9][1]$a$11053 [13] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [15] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [15] 3'000 $memory\instruction_memory$rdmux[0][9][1]$a$11053 [8] 5'00011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][6]$12603:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][6]$a$12604, B=$memory\instruction_memory$rdmux[0][10][6]$b$12605, Y=$memory\instruction_memory$rdmux[0][9][3]$a$11059
      New ports: A={ 2'00 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [7] $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] 1'0 $memory\instruction_memory$rdmux[0][10][6]$a$12604 [2] }, B={ $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] 1'1 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5] 1'1 $memory\instruction_memory$rdmux[0][10][6]$b$12605 [4] $memory\instruction_memory$rdmux[0][10][6]$b$12605 [5:4] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][3]$a$11059 [21:20] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [10] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [7] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [5:4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][3]$a$11059 [31:22] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [19:14] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [12:11] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [9:8] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [6] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [3] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [1:0] } = { $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [21] 1'0 $memory\instruction_memory$rdmux[0][9][3]$a$11059 [10] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [4] 3'000 $memory\instruction_memory$rdmux[0][9][3]$a$11059 [7] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [7] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][0]$12585:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][0]$a$12586, B=$memory\instruction_memory$rdmux[0][10][0]$b$12587, Y=$memory\instruction_memory$rdmux[0][9][0]$a$11050
      New ports: A={ 1'0 $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] 2'10 $memory\instruction_memory$rdmux[0][10][0]$a$12586 [2] }, B={ $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] 1'0 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [4] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [2] }, Y={ $memory\instruction_memory$rdmux[0][9][0]$a$11050 [16] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [12] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [8] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [4:2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][0]$a$11050 [31:17] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [15:13] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [11:9] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [7:5] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [1:0] } = { 1'0 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [16] 7'0000000 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [3] 12'000000000000 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [3:2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][7]$12606:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][7]$a$12607, B=$memory\instruction_memory$rdmux[0][10][7]$b$12608, Y=$memory\instruction_memory$rdmux[0][9][3]$b$11060
      New ports: A={ $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [23] 4'0011 $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] 1'0 $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] $memory\instruction_memory$rdmux[0][10][7]$a$12607 [2] }, B={ $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] 1'1 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] 2'10 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [4] 1'1 $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5] $memory\instruction_memory$rdmux[0][10][7]$b$12608 [5:4] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][3]$b$11060 [27] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [20] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [13] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [8:4] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][3]$b$11060 [31:28] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [26:24] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [22:21] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [19:16] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [14] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [12:9] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [3] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [1:0] } = { $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [27] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [27] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [20] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] 2'01 $memory\instruction_memory$rdmux[0][9][3]$b$11060 [7] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [6] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [6] 2'01 $memory\instruction_memory$rdmux[0][9][3]$b$11060 [8] 3'011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][1]$12588:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][1]$a$12589, B=$memory\instruction_memory$rdmux[0][10][1]$b$12590, Y=$memory\instruction_memory$rdmux[0][9][0]$b$11051
      New ports: A={ $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [4] 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5:4] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [5:4] 1'0 }, B={ 1'0 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [16] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [16] 2'01 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] 1'1 $memory\instruction_memory$rdmux[0][10][1]$b$12590 [2] }, Y={ $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26:25] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [16] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [11:10] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [8] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [5:4] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][0]$b$11051 [31:27] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [24:17] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [15:12] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [9] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [7:6] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [3] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [1:0] } = { $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] 1'0 $memory\instruction_memory$rdmux[0][9][0]$b$11051 [11] 8'00000000 $memory\instruction_memory$rdmux[0][9][0]$b$11051 [5] 1'0 $memory\instruction_memory$rdmux[0][9][0]$b$11051 [5] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [2] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][8]$12609:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][8]$a$12610, B=0, Y=$memory\instruction_memory$rdmux[0][9][4]$a$11062
      New ports: A=$memory\instruction_memory$rdmux[0][10][8]$a$12610 [0], B=1'0, Y=$memory\instruction_memory$rdmux[0][9][4]$a$11062 [0]
      New connections: $memory\instruction_memory$rdmux[0][9][4]$a$11062 [31:1] = { $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] 1'0 $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] 2'00 $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] 1'0 $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] 5'00000 $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] 1'0 $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] $memory\instruction_memory$rdmux[0][9][4]$a$11062 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][4]$12597:
      Old ports: A=$memory\instruction_memory$rdmux[0][10][4]$a$12598, B=$memory\instruction_memory$rdmux[0][10][4]$b$12599, Y=$memory\instruction_memory$rdmux[0][9][2]$a$11056
      New ports: A={ 2'11 $memory\instruction_memory$rdmux[0][10][4]$a$12598 [5] 2'01 $memory\instruction_memory$rdmux[0][10][4]$a$12598 [8] $memory\instruction_memory$rdmux[0][10][4]$a$12598 [5] 2'00 }, B={ 1'0 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [15] $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] 1'1 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] 1'1 $memory\instruction_memory$rdmux[0][10][4]$b$12599 [2] }, Y={ $memory\instruction_memory$rdmux[0][9][2]$a$11056 [27] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [20] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [15] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [13] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [8] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [5:4] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][9][2]$a$11056 [31:28] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [26:23] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [21] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [19:16] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [14] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [12:9] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [7:6] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [3] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [1:0] } = { $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [27] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [27] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [15] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [20] 2'01 $memory\instruction_memory$rdmux[0][9][2]$a$11056 [4] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [15] 5'00011 $memory\instruction_memory$rdmux[0][9][2]$a$11056 [4] 4'0011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][9][0]$11049:
      Old ports: A=$memory\instruction_memory$rdmux[0][9][0]$a$11050, B=$memory\instruction_memory$rdmux[0][9][0]$b$11051, Y=$memory\instruction_memory$rdmux[0][8][0]$a$10282
      New ports: A={ $memory\instruction_memory$rdmux[0][9][0]$a$11050 [16] 2'00 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [16] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [12] 3'000 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [8] 1'0 $memory\instruction_memory$rdmux[0][9][0]$a$11050 [2] $memory\instruction_memory$rdmux[0][9][0]$a$11050 [4:2] }, B={ $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [26:25] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [16] 1'0 $memory\instruction_memory$rdmux[0][9][0]$b$11051 [11:10] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [5] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [8] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [2] $memory\instruction_memory$rdmux[0][9][0]$b$11051 [5:4] 1'0 $memory\instruction_memory$rdmux[0][9][0]$b$11051 [2] }, Y={ $memory\instruction_memory$rdmux[0][8][0]$a$10282 [30] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26:25] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [16] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [12:7] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [5:2] }
      New connections: { $memory\instruction_memory$rdmux[0][8][0]$a$10282 [31] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [29:27] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [24:17] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [15:13] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [6] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [1:0] } = { $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26] 1'0 $memory\instruction_memory$rdmux[0][8][0]$a$10282 [11] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [3] 7'0000000 $memory\instruction_memory$rdmux[0][8][0]$a$10282 [9] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [3] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][9][3]$11058:
      Old ports: A=$memory\instruction_memory$rdmux[0][9][3]$a$11059, B=$memory\instruction_memory$rdmux[0][9][3]$b$11060, Y=$memory\instruction_memory$rdmux[0][8][1]$b$10286
      New ports: A={ $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [21:20] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [13] 1'0 $memory\instruction_memory$rdmux[0][9][3]$a$11059 [10] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [7] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [7] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [5:4] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [2] }, B={ $memory\instruction_memory$rdmux[0][9][3]$b$11060 [27] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [20] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [23] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [20] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [7] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [15] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [13] $memory\instruction_memory$rdmux[0][9][3]$b$11060 [6] 1'1 $memory\instruction_memory$rdmux[0][9][3]$b$11060 [8:4] 1'0 $memory\instruction_memory$rdmux[0][9][3]$b$11060 [2] }, Y={ $memory\instruction_memory$rdmux[0][8][1]$b$10286 [27] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [24:23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [21:20] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [17] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [15] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [13:12] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [10] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [8:2] }
      New connections: { $memory\instruction_memory$rdmux[0][8][1]$b$10286 [31:28] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [26:25] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [22] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [19:18] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [16] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [14] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [11] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [9] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [1:0] } = { $memory\instruction_memory$rdmux[0][8][1]$b$10286 [23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [27] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [27] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [21] 1'0 $memory\instruction_memory$rdmux[0][8][1]$b$10286 [10] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [15] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [12] 1'0 $memory\instruction_memory$rdmux[0][8][1]$b$10286 [8] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][9][2]$11055:
      Old ports: A=$memory\instruction_memory$rdmux[0][9][2]$a$11056, B=$memory\instruction_memory$rdmux[0][9][2]$b$11057, Y=$memory\instruction_memory$rdmux[0][8][1]$a$10285
      New ports: A={ $memory\instruction_memory$rdmux[0][9][2]$a$11056 [27] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [15] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [22] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [20] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [20] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [4] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [15] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [13] 2'11 $memory\instruction_memory$rdmux[0][9][2]$a$11056 [8] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [4] 1'0 $memory\instruction_memory$rdmux[0][9][2]$a$11056 [5:4] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [2] }, B={ $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] 1'0 $memory\instruction_memory$rdmux[0][9][2]$b$11057 [6] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [7:6] 1'0 $memory\instruction_memory$rdmux[0][9][2]$b$11057 [15] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [15] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [13] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [10] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [8] $memory\instruction_memory$rdmux[0][9][2]$b$11057 [8:5] 2'00 }, Y={ $memory\instruction_memory$rdmux[0][8][1]$a$10285 [27] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [25:20] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [17] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [15] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [13] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [10:4] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][8][1]$a$10285 [31:28] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [26] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [19:18] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [16] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [14] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [12:11] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [3] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [1:0] } = { $memory\instruction_memory$rdmux[0][8][1]$a$10285 [25] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [27] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [25] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [27] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [25] 2'01 $memory\instruction_memory$rdmux[0][8][1]$a$10285 [15] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [6] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [6] 4'0011 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][9][1]$11052:
      Old ports: A=$memory\instruction_memory$rdmux[0][9][1]$a$11053, B=$memory\instruction_memory$rdmux[0][9][1]$b$11054, Y=$memory\instruction_memory$rdmux[0][8][0]$b$10283
      New ports: A={ $memory\instruction_memory$rdmux[0][9][1]$a$11053 [28] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [4] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [21] 1'1 $memory\instruction_memory$rdmux[0][9][1]$a$11053 [21:20] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [13] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [15] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [13] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [8] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [9:7] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [5:4] 1'0 }, B={ $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [22] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [22] 1'0 $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [13] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [9] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [7] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [7] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [5:4] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [2] }, Y={ $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [25:20] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [18] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [15] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [13] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [10:7] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [5:4] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [2] }
      New connections: { $memory\instruction_memory$rdmux[0][8][0]$b$10283 [31:29] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [27:26] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [19] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [17:16] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [14] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [12:11] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [6] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [3] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [1:0] } = { $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [25] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [25] 1'0 $memory\instruction_memory$rdmux[0][8][0]$b$10283 [15] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [15] 3'000 $memory\instruction_memory$rdmux[0][8][0]$b$10283 [2] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [2] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][9][4]$11061:
      Old ports: A=$memory\instruction_memory$rdmux[0][9][4]$a$11062, B=0, Y=$memory\instruction_memory$rdmux[0][8][2]$a$10288
      New ports: A=$memory\instruction_memory$rdmux[0][9][4]$a$11062 [0], B=1'0, Y=$memory\instruction_memory$rdmux[0][8][2]$a$10288 [0]
      New connections: $memory\instruction_memory$rdmux[0][8][2]$a$10288 [31:1] = { $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] 1'0 $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] 2'00 $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] 1'0 $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] 5'00000 $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] 1'0 $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] $memory\instruction_memory$rdmux[0][8][2]$a$10288 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][8][2]$10287:
      Old ports: A=$memory\instruction_memory$rdmux[0][8][2]$a$10288, B=0, Y=$memory\instruction_memory$rdmux[0][7][1]$a$9901
      New ports: A=$memory\instruction_memory$rdmux[0][8][2]$a$10288 [0], B=1'0, Y=$memory\instruction_memory$rdmux[0][7][1]$a$9901 [0]
      New connections: $memory\instruction_memory$rdmux[0][7][1]$a$9901 [31:1] = { $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] 1'0 $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] 2'00 $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] 1'0 $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] 5'00000 $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] 1'0 $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] $memory\instruction_memory$rdmux[0][7][1]$a$9901 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][8][0]$10281:
      Old ports: A=$memory\instruction_memory$rdmux[0][8][0]$a$10282, B=$memory\instruction_memory$rdmux[0][8][0]$b$10283, Y=$memory\instruction_memory$rdmux[0][7][0]$a$9898
      New ports: A={ $memory\instruction_memory$rdmux[0][8][0]$a$10282 [30] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [26:25] 1'0 $memory\instruction_memory$rdmux[0][8][0]$a$10282 [11] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [3] 3'000 $memory\instruction_memory$rdmux[0][8][0]$a$10282 [16] 1'0 $memory\instruction_memory$rdmux[0][8][0]$a$10282 [9] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [12:7] $memory\instruction_memory$rdmux[0][8][0]$a$10282 [5:2] }, B={ $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [28] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [25] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [25:20] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [18] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [15] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [15] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [13] 2'00 $memory\instruction_memory$rdmux[0][8][0]$b$10283 [10:7] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [5:4] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [2] $memory\instruction_memory$rdmux[0][8][0]$b$10283 [2] }, Y={ $memory\instruction_memory$rdmux[0][7][0]$a$9898 [30] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [28] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [26:20] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [18] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [16:15] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [13:7] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [5:2] }
      New connections: { $memory\instruction_memory$rdmux[0][7][0]$a$9898 [31] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [29] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [27] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [19] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [17] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [14] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [6] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [1:0] } = { $memory\instruction_memory$rdmux[0][7][0]$a$9898 [28] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [28] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [26] 1'0 $memory\instruction_memory$rdmux[0][7][0]$a$9898 [15] 1'0 $memory\instruction_memory$rdmux[0][7][0]$a$9898 [3] 2'11 }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][8][1]$10284:
      Old ports: A=$memory\instruction_memory$rdmux[0][8][1]$a$10285, B=$memory\instruction_memory$rdmux[0][8][1]$b$10286, Y=$memory\instruction_memory$rdmux[0][7][0]$b$9899
      New ports: A={ $memory\instruction_memory$rdmux[0][8][1]$a$10285 [27] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [25:20] 1'1 $memory\instruction_memory$rdmux[0][8][1]$a$10285 [17] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [15] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [13] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [6] $memory\instruction_memory$rdmux[0][8][1]$a$10285 [10:4] 1'0 $memory\instruction_memory$rdmux[0][8][1]$a$10285 [2] }, B={ $memory\instruction_memory$rdmux[0][8][1]$b$10286 [27] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [24:23] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [21] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [21:20] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [10] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [17] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [15] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [13:12] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [10] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [8] $memory\instruction_memory$rdmux[0][8][1]$b$10286 [8:2] }, Y={ $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25:20] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [18:17] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [15] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [13:12] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [10:2] }
      New connections: { $memory\instruction_memory$rdmux[0][7][0]$b$9899 [31:28] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [26] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [19] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [16] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [14] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [11] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [1:0] } = { $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25] 1'0 $memory\instruction_memory$rdmux[0][7][0]$b$9899 [15] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [12] 3'011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][1]$9900:
      Old ports: A=$memory\instruction_memory$rdmux[0][7][1]$a$9901, B=0, Y=$memory\instruction_memory$rdmux[0][6][0]$b$9707
      New ports: A=$memory\instruction_memory$rdmux[0][7][1]$a$9901 [0], B=1'0, Y=$memory\instruction_memory$rdmux[0][6][0]$b$9707 [0]
      New connections: $memory\instruction_memory$rdmux[0][6][0]$b$9707 [31:1] = { $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 2'00 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 5'00000 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] }
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][7][0]$9897:
      Old ports: A=$memory\instruction_memory$rdmux[0][7][0]$a$9898, B=$memory\instruction_memory$rdmux[0][7][0]$b$9899, Y=$memory\instruction_memory$rdmux[0][6][0]$a$9706
      New ports: A={ $memory\instruction_memory$rdmux[0][7][0]$a$9898 [30] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [28] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [28] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [26] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [26:20] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [18] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [15] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [16:15] 1'0 $memory\instruction_memory$rdmux[0][7][0]$a$9898 [13:7] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [3] $memory\instruction_memory$rdmux[0][7][0]$a$9898 [5:2] }, B={ $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [27] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [25:20] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [18:17] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [15] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [15] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [12] $memory\instruction_memory$rdmux[0][7][0]$b$9899 [13:12] 1'0 $memory\instruction_memory$rdmux[0][7][0]$b$9899 [10:2] }, Y={ $memory\instruction_memory$rdmux[0][6][0]$a$9706 [30:20] $memory\instruction_memory$rdmux[0][6][0]$a$9706 [18:2] }
      New connections: { $memory\instruction_memory$rdmux[0][6][0]$a$9706 [31] $memory\instruction_memory$rdmux[0][6][0]$a$9706 [19] $memory\instruction_memory$rdmux[0][6][0]$a$9706 [1:0] } = { $memory\instruction_memory$rdmux[0][6][0]$a$9706 [29] 3'011 }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][6][0]$9705:
      Old ports: A=$memory\instruction_memory$rdmux[0][6][0]$a$9706, B=$memory\instruction_memory$rdmux[0][6][0]$b$9707, Y=$memory\instruction_memory$rdmux[0][5][0]$a$9610
      New ports: A={ $memory\instruction_memory$rdmux[0][6][0]$a$9706 [30:20] 1'0 $memory\instruction_memory$rdmux[0][6][0]$a$9706 [18:2] 1'1 }, B={ $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 2'00 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 5'00000 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] 1'0 $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] $memory\instruction_memory$rdmux[0][6][0]$b$9707 [0] }, Y={ $memory\instruction_memory$rdmux[0][5][0]$a$9610 [30:2] $memory\instruction_memory$rdmux[0][5][0]$a$9610 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][5][0]$a$9610 [31] $memory\instruction_memory$rdmux[0][5][0]$a$9610 [1] } = { $memory\instruction_memory$rdmux[0][5][0]$a$9610 [29] $memory\instruction_memory$rdmux[0][5][0]$a$9610 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][5][0]$9609:
      Old ports: A=$memory\instruction_memory$rdmux[0][5][0]$a$9610, B=0, Y=$memory\instruction_memory$rdmux[0][4][0]$a$9562
      New ports: A={ $memory\instruction_memory$rdmux[0][5][0]$a$9610 [30:2] $memory\instruction_memory$rdmux[0][5][0]$a$9610 [0] }, B=30'000000000000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][4][0]$a$9562 [30:2] $memory\instruction_memory$rdmux[0][4][0]$a$9562 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][4][0]$a$9562 [31] $memory\instruction_memory$rdmux[0][4][0]$a$9562 [1] } = { $memory\instruction_memory$rdmux[0][4][0]$a$9562 [29] $memory\instruction_memory$rdmux[0][4][0]$a$9562 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][4][0]$9561:
      Old ports: A=$memory\instruction_memory$rdmux[0][4][0]$a$9562, B=0, Y=$memory\instruction_memory$rdmux[0][3][0]$a$9538
      New ports: A={ $memory\instruction_memory$rdmux[0][4][0]$a$9562 [30:2] $memory\instruction_memory$rdmux[0][4][0]$a$9562 [0] }, B=30'000000000000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][3][0]$a$9538 [30:2] $memory\instruction_memory$rdmux[0][3][0]$a$9538 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][3][0]$a$9538 [31] $memory\instruction_memory$rdmux[0][3][0]$a$9538 [1] } = { $memory\instruction_memory$rdmux[0][3][0]$a$9538 [29] $memory\instruction_memory$rdmux[0][3][0]$a$9538 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][3][0]$9537:
      Old ports: A=$memory\instruction_memory$rdmux[0][3][0]$a$9538, B=0, Y=$memory\instruction_memory$rdmux[0][2][0]$a$9526
      New ports: A={ $memory\instruction_memory$rdmux[0][3][0]$a$9538 [30:2] $memory\instruction_memory$rdmux[0][3][0]$a$9538 [0] }, B=30'000000000000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][2][0]$a$9526 [30:2] $memory\instruction_memory$rdmux[0][2][0]$a$9526 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][2][0]$a$9526 [31] $memory\instruction_memory$rdmux[0][2][0]$a$9526 [1] } = { $memory\instruction_memory$rdmux[0][2][0]$a$9526 [29] $memory\instruction_memory$rdmux[0][2][0]$a$9526 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][2][0]$9525:
      Old ports: A=$memory\instruction_memory$rdmux[0][2][0]$a$9526, B=0, Y=$memory\instruction_memory$rdmux[0][1][0]$a$9520
      New ports: A={ $memory\instruction_memory$rdmux[0][2][0]$a$9526 [30:2] $memory\instruction_memory$rdmux[0][2][0]$a$9526 [0] }, B=30'000000000000000000000000000000, Y={ $memory\instruction_memory$rdmux[0][1][0]$a$9520 [30:2] $memory\instruction_memory$rdmux[0][1][0]$a$9520 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][1][0]$a$9520 [31] $memory\instruction_memory$rdmux[0][1][0]$a$9520 [1] } = { $memory\instruction_memory$rdmux[0][1][0]$a$9520 [29] $memory\instruction_memory$rdmux[0][1][0]$a$9520 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][1][0]$9519:
      Old ports: A=$memory\instruction_memory$rdmux[0][1][0]$a$9520, B=32'x, Y=$memory\instruction_memory$rdmux[0][0][0]$a$9517
      New ports: A={ $memory\instruction_memory$rdmux[0][1][0]$a$9520 [30:2] $memory\instruction_memory$rdmux[0][1][0]$a$9520 [0] }, B=30'x, Y={ $memory\instruction_memory$rdmux[0][0][0]$a$9517 [30:2] $memory\instruction_memory$rdmux[0][0][0]$a$9517 [0] }
      New connections: { $memory\instruction_memory$rdmux[0][0][0]$a$9517 [31] $memory\instruction_memory$rdmux[0][0][0]$a$9517 [1] } = { $memory\instruction_memory$rdmux[0][0][0]$a$9517 [29] $memory\instruction_memory$rdmux[0][0][0]$a$9517 [0] }
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][0][0]$9516:
      Old ports: A=$memory\instruction_memory$rdmux[0][0][0]$a$9517, B=32'x, Y=\out
      New ports: A={ $memory\instruction_memory$rdmux[0][0][0]$a$9517 [30:2] $memory\instruction_memory$rdmux[0][0][0]$a$9517 [0] }, B=30'x, Y={ \out [30:2] \out [0] }
      New connections: { \out [31] \out [1] } = { \out [29] \out [0] }
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 43 changes.

19.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
<suppressed ~39 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 13 cells.

19.26.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 21 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 25 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 26 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 27 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 28 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 30 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.
Setting constant 0-bit at position 31 on $auto$ff.cc:262:slice$1050 ($dffe) from module data_mem.

19.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4065 unused wires.
<suppressed ~1 debug messages>

19.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.26.16. Rerunning OPT passes. (Maybe there is more to do..)

19.26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

19.26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][2]$12591:
      Old ports: A={ 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 3'011 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 }, B={ 2'01 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, Y={ $memory\instruction_memory$rdmux[0][9][1]$a$11053 [31] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [23] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [20] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [17] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [18] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [27] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [10] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [7] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [5] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [24] }
      New ports: A={ 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 3'011 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 }, B={ 2'01 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, Y={ $memory\instruction_memory$rdmux[0][9][1]$a$11053 [31] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [23] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [17] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [18] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [27] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [10] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [7] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [5] $memory\instruction_memory$rdmux[0][9][1]$a$11053 [24] }
      New connections: $memory\instruction_memory$rdmux[0][9][1]$a$11053 [20] = $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31]
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][3]$12594:
      Old ports: A={ 1'0 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] 3'010 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [22] }, B={ $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] 3'110 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [22] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][1]$b$11054 [23] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [31] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [18] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [8] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [5] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [20] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [24] }
      New ports: A={ 1'0 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] 3'010 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [22] }, B={ $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30] 3'110 $memory\instruction_memory$rdmux[0][10][0]$b$12587 [22] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][1]$b$11054 [23] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [18] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [8] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [5] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [20] $memory\instruction_memory$rdmux[0][9][1]$b$11054 [24] }
      New connections: $memory\instruction_memory$rdmux[0][9][1]$b$11054 [31] = $memory\instruction_memory$rdmux[0][10][0]$b$12587 [30]
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][4]$12597:
      Old ports: A={ 2'11 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 2'01 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 2'00 }, B={ 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, Y={ $memory\instruction_memory$rdmux[0][9][2]$a$11056 [30] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [31] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [21] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [24] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [13] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [8] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [5] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [17] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [2] }
      New ports: A={ 2'11 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 2'01 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] 2'00 }, B={ 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 2'11 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, Y={ $memory\instruction_memory$rdmux[0][9][2]$a$11056 [30] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [31] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [21] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [24] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [13] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [8] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [17] $memory\instruction_memory$rdmux[0][9][2]$a$11056 [2] }
      New connections: $memory\instruction_memory$rdmux[0][9][2]$a$11056 [5] = $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31]
    Consolidated identical input bits for $mux cell $memory\instruction_memory$rdmux[0][10][6]$12603:
      Old ports: A={ 2'00 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, B={ $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] 1'1 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][3]$a$11059 [22] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [20] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [31] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [18] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [9] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [5] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [17] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [24] }
      New ports: A={ 2'00 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] }, B={ $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] 2'11 $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23] $memory\instruction_memory$rdmux[0][10][1]$a$12589 [31] 1'0 }, Y={ $memory\instruction_memory$rdmux[0][9][3]$a$11059 [22] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [20] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [18] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [9] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [5] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [17] $memory\instruction_memory$rdmux[0][9][3]$a$11059 [24] }
      New connections: $memory\instruction_memory$rdmux[0][9][3]$a$11059 [31] = $memory\instruction_memory$rdmux[0][10][1]$a$12589 [23]
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 4 changes.

19.26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.26.20. Executing OPT_DFF pass (perform DFF optimizations).

19.26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.26.23. Rerunning OPT passes. (Maybe there is more to do..)

19.26.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALUControl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ForwardingUnit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \branch_decision..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \branch_predictor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \control..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \csr_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \data_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ex_mem..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \id_ex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \if_id..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \instruction_memory..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_wb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \program_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sign_mask_gen..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

19.26.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALUControl.
  Optimizing cells in module \ForwardingUnit.
  Optimizing cells in module \adder.
  Optimizing cells in module \alu.
  Optimizing cells in module \branch_decision.
  Optimizing cells in module \branch_predictor.
  Optimizing cells in module \control.
  Optimizing cells in module \cpu.
  Optimizing cells in module \csr_file.
  Optimizing cells in module \data_mem.
  Optimizing cells in module \ex_mem.
  Optimizing cells in module \id_ex.
  Optimizing cells in module \if_id.
  Optimizing cells in module \imm_gen.
  Optimizing cells in module \instruction_memory.
  Optimizing cells in module \mem_wb.
  Optimizing cells in module \mux2to1.
  Optimizing cells in module \program_counter.
  Optimizing cells in module \regfile.
  Optimizing cells in module \sign_mask_gen.
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.26.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.26.27. Executing OPT_DFF pass (perform DFF optimizations).

19.26.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.26.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.26.30. Finished OPT passes. (There is nothing left to do.)

19.27. Executing ICE40_WRAPCARRY pass (wrap carries).

19.28. Executing TECHMAP pass (map to technology primitives).

19.28.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

19.28.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

19.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$85df5dc01c7df96a7d8e5f1fdf76ce9ac452af63\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$878fd1809419ed11a2d056be26ac30d95fbba358\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$feecc7a0dbd012970970f2858f15e786e251f677\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$5180471e6f22625c8e3c4261cd538e11648586b5\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$335cfd09f1afa8139c4aafcbbe5f361887b79c5e\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$2653f68ddb8eab7b1907b4a20767b72a824a7a36\_80_ice40_alu for cells of type $alu.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$a5f0941832cc861549e29ccafffe20bfdf2e5528\_90_pmux for cells of type $pmux.
Using template $paramod$a13703aa027da371a1931fc542d213d7de559b19\_90_pmux for cells of type $pmux.
Using template $paramod$a9f023b7f9387cc24984a8fa4722169e6d5f74aa\_90_pmux for cells of type $pmux.
No more expansions possible.
<suppressed ~1896 debug messages>

19.29. Executing OPT pass (performing simple optimizations).

19.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~254 debug messages>
Optimizing module ForwardingUnit.
Optimizing module adder.
<suppressed ~32 debug messages>
Optimizing module alu.
<suppressed ~221 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
<suppressed ~32 debug messages>
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~132 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
<suppressed ~54 debug messages>
Optimizing module instruction_memory.
<suppressed ~11 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~16 debug messages>
Optimizing module top.

19.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
<suppressed ~270 debug messages>
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
<suppressed ~1080 debug messages>
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~9 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
<suppressed ~273 debug messages>
Finding identical cells in module `\instruction_memory'.
<suppressed ~159 debug messages>
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
<suppressed ~9 debug messages>
Finding identical cells in module `\top'.
Removed a total of 600 cells.

19.29.3. Executing OPT_DFF pass (perform DFF optimizations).

19.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 129 unused cells and 809 unused wires.
<suppressed ~139 debug messages>

19.29.5. Finished fast OPT passes.

19.30. Executing ICE40_OPT pass (performing simple optimizations).

19.30.1. Running ICE40 specific optimizations.

19.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~1 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~63 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.30.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:262:slice$24211 ($_DFFE_PP_) from module data_mem (D = $procmux$783.B_AND_S [3], Q = \state [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:262:slice$24210 ($_DFFE_PP_) from module data_mem (D = $procmux$783.B_AND_S [2], Q = \state [0], rval = 1'1).

19.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 2 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

19.30.6. Rerunning OPT passes. (Removed registers in this run.)

19.30.7. Running ICE40 specific optimizations.

19.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.30.10. Executing OPT_DFF pass (perform DFF optimizations).

19.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.30.12. Finished OPT passes. (There is nothing left to do.)

19.31. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

19.32. Executing TECHMAP pass (map to technology primitives).

19.32.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

19.32.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFFCE_PP1P_ for cells of type $_SDFFCE_PP1P_.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
No more expansions possible.
<suppressed ~711 debug messages>

19.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).

19.35. Executing ICE40_OPT pass (performing simple optimizations).

19.35.1. Running ICE40 specific optimizations.

19.35.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
<suppressed ~11 debug messages>
Optimizing module ForwardingUnit.
<suppressed ~2 debug messages>
Optimizing module adder.
Optimizing module alu.
<suppressed ~33 debug messages>
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
<suppressed ~4 debug messages>
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
<suppressed ~19 debug messages>
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
<suppressed ~4 debug messages>
Optimizing module top.
<suppressed ~1 debug messages>

19.35.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
<suppressed ~246 debug messages>
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 82 cells.

19.35.4. Executing OPT_DFF pass (perform DFF optimizations).

19.35.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2935 unused wires.
<suppressed ~8 debug messages>

19.35.6. Rerunning OPT passes. (Removed registers in this run.)

19.35.7. Running ICE40 specific optimizations.

19.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALUControl.
Optimizing module ForwardingUnit.
Optimizing module adder.
Optimizing module alu.
Optimizing module branch_decision.
Optimizing module branch_predictor.
Optimizing module control.
Optimizing module cpu.
Optimizing module csr_file.
Optimizing module data_mem.
Optimizing module ex_mem.
Optimizing module id_ex.
Optimizing module if_id.
Optimizing module imm_gen.
Optimizing module instruction_memory.
Optimizing module mem_wb.
Optimizing module mux2to1.
Optimizing module program_counter.
Optimizing module regfile.
Optimizing module sign_mask_gen.
Optimizing module top.

19.35.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALUControl'.
Finding identical cells in module `\ForwardingUnit'.
Finding identical cells in module `\adder'.
Finding identical cells in module `\alu'.
Finding identical cells in module `\branch_decision'.
Finding identical cells in module `\branch_predictor'.
Finding identical cells in module `\control'.
Finding identical cells in module `\cpu'.
Finding identical cells in module `\csr_file'.
Finding identical cells in module `\data_mem'.
Finding identical cells in module `\ex_mem'.
Finding identical cells in module `\id_ex'.
Finding identical cells in module `\if_id'.
Finding identical cells in module `\imm_gen'.
Finding identical cells in module `\instruction_memory'.
Finding identical cells in module `\mem_wb'.
Finding identical cells in module `\mux2to1'.
Finding identical cells in module `\program_counter'.
Finding identical cells in module `\regfile'.
Finding identical cells in module `\sign_mask_gen'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.35.10. Executing OPT_DFF pass (perform DFF optimizations).

19.35.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALUControl..
Finding unused cells or wires in module \ForwardingUnit..
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \alu..
Finding unused cells or wires in module \branch_decision..
Finding unused cells or wires in module \branch_predictor..
Finding unused cells or wires in module \control..
Finding unused cells or wires in module \cpu..
Finding unused cells or wires in module \csr_file..
Finding unused cells or wires in module \data_mem..
Finding unused cells or wires in module \ex_mem..
Finding unused cells or wires in module \id_ex..
Finding unused cells or wires in module \if_id..
Finding unused cells or wires in module \imm_gen..
Finding unused cells or wires in module \instruction_memory..
Finding unused cells or wires in module \mem_wb..
Finding unused cells or wires in module \mux2to1..
Finding unused cells or wires in module \program_counter..
Finding unused cells or wires in module \regfile..
Finding unused cells or wires in module \sign_mask_gen..
Finding unused cells or wires in module \top..

19.35.12. Finished OPT passes. (There is nothing left to do.)

19.36. Executing TECHMAP pass (map to technology primitives).

19.36.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

19.36.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19.37. Executing ABC pass (technology mapping using ABC).

19.37.1. Extracting gate netlist of module `\ALUControl' to `<abc-temp-dir>/input.blif'..
Extracted 167 gates and 179 wires to a netlist network with 11 inputs and 7 outputs.

19.37.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      18.
ABC: Participating nodes from both networks       =      50.
ABC: Participating nodes from the first network   =      17. (  53.12 % of nodes)
ABC: Participating nodes from the second network  =      33. ( 103.12 % of nodes)
ABC: Node pairs (any polarity)                    =      17. (  53.12 % of names can be moved)
ABC: Node pairs (same polarity)                   =      12. (  37.50 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       31
ABC RESULTS:        internal signals:      161
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

19.37.2. Extracting gate netlist of module `\ForwardingUnit' to `<abc-temp-dir>/input.blif'..
Extracted 143 gates and 203 wires to a netlist network with 60 inputs and 4 outputs.

19.37.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      16.
ABC: Participating nodes from both networks       =      30.
ABC: Participating nodes from the first network   =      15. (  24.59 % of nodes)
ABC: Participating nodes from the second network  =      15. (  24.59 % of nodes)
ABC: Node pairs (any polarity)                    =      15. (  24.59 % of names can be moved)
ABC: Node pairs (same polarity)                   =       7. (  11.48 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       60
ABC RESULTS:        internal signals:      139
ABC RESULTS:           input signals:       60
ABC RESULTS:          output signals:        4
Removing temp directory.

19.37.3. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.4. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 1340 gates and 1480 wires to a netlist network with 139 inputs and 65 outputs.

19.37.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     303.
ABC: Participating nodes from both networks       =     653.
ABC: Participating nodes from the first network   =     302. (  52.71 % of nodes)
ABC: Participating nodes from the second network  =     351. (  61.26 % of nodes)
ABC: Node pairs (any polarity)                    =     302. (  52.71 % of names can be moved)
ABC: Node pairs (same polarity)                   =     118. (  20.59 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      572
ABC RESULTS:        internal signals:     1276
ABC RESULTS:           input signals:      139
ABC RESULTS:          output signals:       65
Removing temp directory.

19.37.5. Extracting gate netlist of module `\branch_decision' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 3 outputs.

19.37.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       7.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       4. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.5.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

19.37.6. Extracting gate netlist of module `\branch_predictor' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 15 wires to a netlist network with 4 inputs and 3 outputs.

19.37.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.6.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        3
Removing temp directory.

19.37.7. Extracting gate netlist of module `\control' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 43 wires to a netlist network with 7 inputs and 12 outputs.

19.37.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      13.
ABC: Participating nodes from both networks       =      24.
ABC: Participating nodes from the first network   =      12. (  85.71 % of nodes)
ABC: Participating nodes from the second network  =      12. (  85.71 % of nodes)
ABC: Node pairs (any polarity)                    =      12. (  85.71 % of names can be moved)
ABC: Node pairs (same polarity)                   =      12. (  85.71 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.7.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       13
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:       12
Removing temp directory.

19.37.8. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 3 outputs.

19.37.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       4.
ABC: Participating nodes from both networks       =       6.
ABC: Participating nodes from the first network   =       3. (  75.00 % of nodes)
ABC: Participating nodes from the second network  =       3. (  75.00 % of nodes)
ABC: Node pairs (any polarity)                    =       3. (  75.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       3. (  75.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.8.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

19.37.9. Extracting gate netlist of module `\csr_file' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.10. Extracting gate netlist of module `\data_mem' to `<abc-temp-dir>/input.blif'..
Extracted 381 gates and 489 wires to a netlist network with 107 inputs and 75 outputs.

19.37.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      87.
ABC: Participating nodes from both networks       =     183.
ABC: Participating nodes from the first network   =      88. (  44.67 % of nodes)
ABC: Participating nodes from the second network  =      95. (  48.22 % of nodes)
ABC: Node pairs (any polarity)                    =      88. (  44.67 % of names can be moved)
ABC: Node pairs (same polarity)                   =      79. (  40.10 % of names can be moved)
ABC: Total runtime =     0.04 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.10.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      196
ABC RESULTS:        internal signals:      307
ABC RESULTS:           input signals:      107
ABC RESULTS:          output signals:       75
Removing temp directory.

19.37.11. Extracting gate netlist of module `\ex_mem' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.12. Extracting gate netlist of module `\id_ex' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.13. Extracting gate netlist of module `\if_id' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.14. Extracting gate netlist of module `\imm_gen' to `<abc-temp-dir>/input.blif'..
Extracted 231 gates and 260 wires to a netlist network with 29 inputs and 31 outputs.

19.37.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      48.
ABC: Participating nodes from both networks       =      95.
ABC: Participating nodes from the first network   =      47. (  88.68 % of nodes)
ABC: Participating nodes from the second network  =      48. (  90.57 % of nodes)
ABC: Node pairs (any polarity)                    =      47. (  88.68 % of names can be moved)
ABC: Node pairs (same polarity)                   =      46. (  86.79 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.14.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       52
ABC RESULTS:        internal signals:      200
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       31
Removing temp directory.

19.37.15. Extracting gate netlist of module `\instruction_memory' to `<abc-temp-dir>/input.blif'..
Extracted 294 gates and 306 wires to a netlist network with 10 inputs and 30 outputs.

19.37.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      60.
ABC: Participating nodes from both networks       =     123.
ABC: Participating nodes from the first network   =      60. (  60.61 % of nodes)
ABC: Participating nodes from the second network  =      63. (  63.64 % of nodes)
ABC: Node pairs (any polarity)                    =      59. (  59.60 % of names can be moved)
ABC: Node pairs (same polarity)                   =      41. (  41.41 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.15.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       98
ABC RESULTS:        internal signals:      266
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       30
Removing temp directory.

19.37.16. Extracting gate netlist of module `\mem_wb' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.17. Extracting gate netlist of module `\mux2to1' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 97 wires to a netlist network with 65 inputs and 32 outputs.

19.37.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.17.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       32
Removing temp directory.

19.37.18. Extracting gate netlist of module `\program_counter' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

19.37.19. Extracting gate netlist of module `\regfile' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 216 wires to a netlist network with 118 inputs and 66 outputs.

19.37.19.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      69.
ABC: Participating nodes from both networks       =     138.
ABC: Participating nodes from the first network   =      69. (  84.15 % of nodes)
ABC: Participating nodes from the second network  =      69. (  84.15 % of nodes)
ABC: Node pairs (any polarity)                    =      69. (  84.15 % of names can be moved)
ABC: Node pairs (same polarity)                   =      67. (  81.71 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.19.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:       66
Removing temp directory.

19.37.20. Extracting gate netlist of module `\sign_mask_gen' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 16 wires to a netlist network with 3 inputs and 4 outputs.

19.37.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       5.
ABC: Participating nodes from both networks       =      11.
ABC: Participating nodes from the first network   =       4. (  80.00 % of nodes)
ABC: Participating nodes from the second network  =       7. ( 140.00 % of nodes)
ABC: Node pairs (any polarity)                    =       4. (  80.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  80.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.20.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        4
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        4
Removing temp directory.

19.37.21. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

19.37.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       2.
ABC: Participating nodes from both networks       =       2.
ABC: Participating nodes from the first network   =       1. (  50.00 % of nodes)
ABC: Participating nodes from the second network  =       1. (  50.00 % of nodes)
ABC: Node pairs (any polarity)                    =       1. (  50.00 % of names can be moved)
ABC: Node pairs (same polarity)                   =       1. (  50.00 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

19.37.21.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

19.38. Executing ICE40_WRAPCARRY pass (wrap carries).

19.39. Executing TECHMAP pass (map to technology primitives).

19.39.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

19.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 34 unused cells and 1452 unused wires.

19.40. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       31
  2-LUT                5
  3-LUT                7
  4-LUT               19
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       31
  2-LUT                5
  3-LUT                7
  4-LUT               19
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       31
  2-LUT                5
  3-LUT                7
  4-LUT               19
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       60
  2-LUT                5
  3-LUT                8
  4-LUT               47
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31
Discovering LUTs.
Number of LUTs:      637
  1-LUT               32
  2-LUT               40
  3-LUT              265
  4-LUT              300
  with \SB_CARRY    (#0)   65
  with \SB_CARRY    (#1)   63

Eliminating LUTs.
Number of LUTs:      637
  1-LUT               32
  2-LUT               40
  3-LUT              265
  4-LUT              300
  with \SB_CARRY    (#0)   65
  with \SB_CARRY    (#1)   63

Combining LUTs.
Number of LUTs:      629
  1-LUT               32
  2-LUT               33
  3-LUT              256
  4-LUT              308
  with \SB_CARRY    (#0)   65
  with \SB_CARRY    (#1)   63
Discovering LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        3
  2-LUT                1
  3-LUT                1
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       35
  2-LUT                1
  3-LUT               34
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Eliminating LUTs.
Number of LUTs:       35
  2-LUT                1
  3-LUT               34
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31

Combining LUTs.
Number of LUTs:       35
  2-LUT                1
  3-LUT               34
  with \SB_CARRY    (#0)   31
  with \SB_CARRY    (#1)   31
Discovering LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       13
  2-LUT                4
  3-LUT                4
  4-LUT                5
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        3
  2-LUT                2
  4-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:      194
  1-LUT                1
  2-LUT               34
  3-LUT               67
  4-LUT               92
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:      194
  1-LUT                1
  2-LUT               34
  3-LUT               67
  4-LUT               92
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:      194
  1-LUT                1
  2-LUT               34
  3-LUT               67
  4-LUT               92
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       52
  2-LUT               19
  3-LUT               13
  4-LUT               20
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       98
  2-LUT               19
  3-LUT               16
  4-LUT               63
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       98
  2-LUT               19
  3-LUT               16
  4-LUT               63
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       98
  2-LUT               19
  3-LUT               16
  4-LUT               63
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       32
  3-LUT               32
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        0
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:       81
  1-LUT                1
  2-LUT                3
  3-LUT                4
  4-LUT               73
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        4
  1-LUT                1
  2-LUT                3
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0
Discovering LUTs.
Number of LUTs:        1
  2-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminating LUTs.
Number of LUTs:        1
  2-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Combining LUTs.
Number of LUTs:        1
  2-LUT                1
  with \SB_CARRY    (#0)    0
  with \SB_CARRY    (#1)    0

Eliminated 0 LUTs.
Combined 8 LUTs.
<suppressed ~8706 debug messages>

19.41. Executing TECHMAP pass (map to technology primitives).

19.41.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

19.41.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$ba05b8a1a425003df083aea0e69541f5cbdc68f2\$lut for cells of type $lut.
Using template $paramod$43779580bfffd5d5a9f321249a174febf1dac288\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod$aff3a645bb9f572421a4f0f49cf8987ceb4bcdc5\$lut for cells of type $lut.
Using template $paramod$df196ed0a1da5c4a58c5e08a1dac304fd3fccaab\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$08bdb0798685c49c8424534ee89648baf6d0e195\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$fc318a7df7fe07fd6e06d67fcbc358e9823ea389\$lut for cells of type $lut.
Using template $paramod$d3afbb90878580c83bdadaa1b3571bf27380c44c\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$27acc603f41a963d4586e964f7f1d593c1251ec7\$lut for cells of type $lut.
Using template $paramod$bfc4959e0bb5dc69f2eb6e4615a2d6b282e7edb7\$lut for cells of type $lut.
Using template $paramod$95cdf1b11be52005914e3259329aa0309538a25d\$lut for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$155ccd9ee5b52913ca009e66ae045056565f70c4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$314fe9458b07176c4d2c8c59533027c4c55155b5\$lut for cells of type $lut.
Using template $paramod$41326ad8644342a66dfb051d050f2b6fbf15015b\$lut for cells of type $lut.
Using template $paramod$97e5ca22b0a7af1da137c70ff3edad3d78753b27\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111110 for cells of type $lut.
Using template $paramod$10d57a73554a8b1b3b01adcc5af88aacffca8816\$lut for cells of type $lut.
Using template $paramod$df0b68f8e63b2deb6710e23abd8b8ff0796d4897\$lut for cells of type $lut.
Using template $paramod$c471af5667a682bd131a5b479e58e470d1b2b7cd\$lut for cells of type $lut.
Using template $paramod$7927bcf0ebf9ad32c99c221ff948f324620c5795\$lut for cells of type $lut.
Using template $paramod$cea8b6ed1335b409ccf7610a545b45a83bdc2358\$lut for cells of type $lut.
Using template $paramod$bd9e9e6bae93201c4fe7a694c75b9f559843fa2c\$lut for cells of type $lut.
Using template $paramod$e5e9da8fed769f971686eed8c5eea50e61f73aaa\$lut for cells of type $lut.
Using template $paramod$e5d634f77f611ff4b7618d4be4afac9d805598e8\$lut for cells of type $lut.
Using template $paramod$e49f6e3576ef1a6d2f58c54414dbb786af8cc869\$lut for cells of type $lut.
Using template $paramod$d54523112f1ed922bf01525670413dacae44d4c9\$lut for cells of type $lut.
Using template $paramod$086ff4b21b0d05cb8560d9fe7ecea75a1d995b17\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001011 for cells of type $lut.
Using template $paramod$42ecf25bf09231cd9c2edca8fc30cc2813064ac5\$lut for cells of type $lut.
Using template $paramod$4fd380a3bcef96608924571f23a78bd3cd403d79\$lut for cells of type $lut.
Using template $paramod$82b4a585d1edcb5c6e755dc9bd3392228a1c1304\$lut for cells of type $lut.
Using template $paramod$bb09b477d79521f107b344e3be1226920a07781c\$lut for cells of type $lut.
Using template $paramod$8e23ae530da362dae52ef8c73ad760463a3d9439\$lut for cells of type $lut.
Using template $paramod$4da2782c2e024b3eded45331a6607870b9d0254f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$edf97c54dcd467ef804e3b110a7e5b8873f8cf6b\$lut for cells of type $lut.
Using template $paramod$81d8a60fd95b1a9f9ef71c12a774ae6988cb9fd5\$lut for cells of type $lut.
Using template $paramod$d4fae2c0d9ad2966369cd4e39b81c71bcd1327c9\$lut for cells of type $lut.
Using template $paramod$8fb648b72df154d69c7656349ffc1af5a9ec67a4\$lut for cells of type $lut.
Using template $paramod$722bfd9af0ae56ca9d1d12a221cb5ede16461f26\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod$05c363abf9bf41737697db9a75c379869832d91c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod$9943b8516a19dd850c4d1115d49099a85875ce31\$lut for cells of type $lut.
Using template $paramod$ad823946862e656cf7f96d606b18b8f972dc6d6c\$lut for cells of type $lut.
Using template $paramod$ee8844629b8aee08469dc19b342bc2fa993f58a2\$lut for cells of type $lut.
Using template $paramod$175104ad114973f30397e1a69eae08cff730fc58\$lut for cells of type $lut.
Using template $paramod$e7a8630f8da31353e21a44336053bd8a39db95b1\$lut for cells of type $lut.
Using template $paramod$f22d9a6ac9fd2cc35ddee633e0e12d175927e7ba\$lut for cells of type $lut.
Using template $paramod$8b24407096beec47292ddeb1567a058197a320b9\$lut for cells of type $lut.
Using template $paramod$b1617bf5db1c34d37abe281234e8f3be6b6d6c19\$lut for cells of type $lut.
Using template $paramod$45a1cb0affd63369b3cd7a56ac805d1b3c4039c0\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$052ca015f1400ebf950f85d5f181f7a5865c336c\$lut for cells of type $lut.
Using template $paramod$c5f3c57a6d466a2f42208bafb8985b96ce884440\$lut for cells of type $lut.
Using template $paramod$017d8c8b5f8f0bd543e7b1e7d026dcb67424a519\$lut for cells of type $lut.
Using template $paramod$25ce03f90631e67c5e443b0900c3d90fee95a96b\$lut for cells of type $lut.
Using template $paramod$99a2a175d178a040bb1ffceb53184fb0f59423c6\$lut for cells of type $lut.
Using template $paramod$f2f0ab3e88277d979f0642b0c760edfb2ecdc157\$lut for cells of type $lut.
Using template $paramod$e5759512db67494ff77fbdfc66dff4006376568f\$lut for cells of type $lut.
Using template $paramod$332a399730bfc61adea04021a76b1c4e4030f37d\$lut for cells of type $lut.
Using template $paramod$27e055a7872816fe163e4d34b0c5cc10c654c47d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$a3cdc1eb771a2c6a16f64da161e11100ac409d2b\$lut for cells of type $lut.
Using template $paramod$935a01ed0eaf9ce11b7629fed4b1953d25a675a3\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod$53ce561f80f32d4298a3beadc88b6c5c78293221\$lut for cells of type $lut.
Using template $paramod$d53578aacfd93124244778d88be0e90eb09c1b1b\$lut for cells of type $lut.
Using template $paramod$b4f85a6321a00b090afc4e21d68e7b99eb94d149\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$a3d9d50a26c80b5c42d9b864ac52f329113a426e\$lut for cells of type $lut.
Using template $paramod$0a94662b0161fc067fc2a1123fd5ac94da2ec1db\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11000010 for cells of type $lut.
Using template $paramod$9e45b1a8f5d89c07bcbb75a2bb1c598231b04feb\$lut for cells of type $lut.
Using template $paramod$6382f7860648fdb6f8a8dc690c25a62882cc501b\$lut for cells of type $lut.
Using template $paramod$179512a187da069f3b79ef6612a41e494e7d54b6\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$070ad9d1ddbf89389161ba7e9ac58b9c0e081923\$lut for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$de3d8c0ac9a85f776878d56395b6e0bf04ae72e7\$lut for cells of type $lut.
Using template $paramod$6d23198eb2b8f79a41c7626605a61009695893b1\$lut for cells of type $lut.
Using template $paramod$bdb7f9ed72fd4f5c7ad81c376f2d8a5c72a0098d\$lut for cells of type $lut.
Using template $paramod$f3e1547c4b47e64c590e75cf09078b2507c8cc75\$lut for cells of type $lut.
Using template $paramod$c1a19a87ccbbb03d43a72335db63f692ddf82cc1\$lut for cells of type $lut.
Using template $paramod$2d8ecce5c907513cebcd38ab5efe0fc26fc03464\$lut for cells of type $lut.
Using template $paramod$2c4c7dfdf674b9c90d6c2cae622d527a6d7d0c22\$lut for cells of type $lut.
Using template $paramod$b4410865e8124402796f9dfbf73ef8d279fdbd08\$lut for cells of type $lut.
Using template $paramod$2902eb8ec3ca272968b5d8a7010e48f85069ed0f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$a50be0e6fa3a01511bb234559cb74fb8bd3e2061\$lut for cells of type $lut.
Using template $paramod$359fe4e746656bf9c72aecaff84fc7bdea9f55a5\$lut for cells of type $lut.
Using template $paramod$e9c77024ca501b890c641f9c0b10e27242db8730\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00011111 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010100 for cells of type $lut.
Using template $paramod$7e0277340d3f34d16bb7c3938d5c21ff955fcc9d\$lut for cells of type $lut.
Using template $paramod$ad86cb7e971524b41c3cbfbe7186c4e8b43b7859\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod$50666a8f9d622ca1f027a4587dfd5f2a7d8810c9\$lut for cells of type $lut.
Using template $paramod$627a8109614c11f6e5d263ec03869552c905c175\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00111010 for cells of type $lut.
Using template $paramod$973818279bc95792902f3c09371fd2407d04a2a5\$lut for cells of type $lut.
Using template $paramod$45d617c2ce0041e27b541f62b0fc3c3ce441a616\$lut for cells of type $lut.
Using template $paramod$f9ade28f1669c608093cfc771d07571aec15660d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod$d6cf0a4b6f6ccd87588da28c41b5b6c258da2509\$lut for cells of type $lut.
Using template $paramod$57f86e5e84c6b4e2c2690a842275a70ba70245aa\$lut for cells of type $lut.
Using template $paramod$0de052767abdccc3aefc818722bdc3c7850d25d6\$lut for cells of type $lut.
Using template $paramod$2ea69c779d6c1b79ac5a87b0d1523c67d5628dba\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$4b2297966ddb718657b80566604f97685ffc0120\$lut for cells of type $lut.
Using template $paramod$acaf438e6f4f31b5725b67e171b88692c75d36a3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$38f9bf4dd2329347b8471f0a98443dd323386889\$lut for cells of type $lut.
Using template $paramod$1df41e75d8c1af4127c594b13f60ff058fd64e7e\$lut for cells of type $lut.
Using template $paramod$11ec7271d8e6e5aeaace08c13e4c601f10e31038\$lut for cells of type $lut.
Using template $paramod$fe9a0158d0352193457c4f5b6282ac86d35fb3ee\$lut for cells of type $lut.
Using template $paramod$044e8b1893c94f717651c5cd428e71c892566f52\$lut for cells of type $lut.
Using template $paramod$f54c0ffd7b041ca43eac7710ab19c0666d826c22\$lut for cells of type $lut.
Using template $paramod$7a9d9396461df152f697894fa3b294ad1b285e08\$lut for cells of type $lut.
Using template $paramod$ee144edd7e4e2a1c095bdb84491744d6b6557171\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01011100 for cells of type $lut.
Using template $paramod$1cfadde4781a0fb6b2920d4cd4458637fb668bc5\$lut for cells of type $lut.
Using template $paramod$fb5ee0bdef1c4e74aaf1fd8efae98b46a2f5e564\$lut for cells of type $lut.
Using template $paramod$b2a4860cd839ff40d9dca4c3f237b2b534267028\$lut for cells of type $lut.
Using template $paramod$adac5163f2ca606e303e4fcb6e4ac1a8cfe9825d\$lut for cells of type $lut.
Using template $paramod$9140e8778d70c73267d16a31702cb8bf43684a0c\$lut for cells of type $lut.
Using template $paramod$b93d1ea7a612a32c185108f67a153d44ffb9aac2\$lut for cells of type $lut.
Using template $paramod$52b0f43ae6cb52b5e726dd3244952f6f33bb5f19\$lut for cells of type $lut.
Using template $paramod$1843b3c15f2447d117e2d5de9b00f791ef5f9fa3\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10100011 for cells of type $lut.
Using template $paramod$d6d3aaeac1b9aa2c4b652c48e0deb565040dda72\$lut for cells of type $lut.
Using template $paramod$2d07c1a6c53c7b878509360922c4fa5ebedc3011\$lut for cells of type $lut.
Using template $paramod$64669a7e87c28e39425dffff48145545533b4971\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010011 for cells of type $lut.
Using template $paramod$8a5a8b5c9249ecf7f5ca78064405f54302e0a76b\$lut for cells of type $lut.
Using template $paramod$51307cdec77060d17363ea3d60427c9afef1ddc2\$lut for cells of type $lut.
Using template $paramod$d119410bab96963da0139669592048db2c09198b\$lut for cells of type $lut.
Using template $paramod$f9b715fbf1040e81e900b2461c2390d17ed5e988\$lut for cells of type $lut.
Using template $paramod$e86317a9023eff51a4e4c6c0e944145b111aea45\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod$fd2847bd008edd03070f42355fdb14fda0191818\$lut for cells of type $lut.
Using template $paramod$48fa0c3f7801e679a29a5497f006a07f72fab5f7\$lut for cells of type $lut.
Using template $paramod$4da6fe9957da309dc16b8f31a6b80b19c05c808d\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$048d4aa2263b685fba6c6b0d38f6224df0dc3042\$lut for cells of type $lut.
Using template $paramod$62f6ec4235bf971942cc23ec48b54028446d4b76\$lut for cells of type $lut.
Using template $paramod$fceb3a526de44b8f6b38e567360f59f7cf5878fb\$lut for cells of type $lut.
Using template $paramod$703a13a751e631ef123f38f7d2125aeabec0f94c\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$096a408fd37568b92eea484c5cc9a8e86ab67a87\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$b297295e19b03521716155b85537bbe86d6a9ae6\$lut for cells of type $lut.
Using template $paramod$71cb81cd7ec213b39129c5f3867d1aa22dffde1b\$lut for cells of type $lut.
Using template $paramod$fe5dc46a592bce6d002f4e3f8fe58f02a6331ec7\$lut for cells of type $lut.
Using template $paramod$cc08dba3aac8677e797984bdf18a09dd37547dd3\$lut for cells of type $lut.
Using template $paramod$59c595af41d4a5cce2d588c3a5f1342749ce7a77\$lut for cells of type $lut.
Using template $paramod$bb4fff1cc3b827238aa40993cafede1c5beecbe3\$lut for cells of type $lut.
Using template $paramod$aabc38448f9289a9f09f7f433eb20ae11e3f6ed9\$lut for cells of type $lut.
Using template $paramod$11214932c124afcb3c02e451dfb1ec9099880837\$lut for cells of type $lut.
Using template $paramod$b431bfd938e35871dd0b7668e1503c7e8b9d491c\$lut for cells of type $lut.
Using template $paramod$2148a1805a1c3b3bf66b2f659d4ba0e8506227b2\$lut for cells of type $lut.
Using template $paramod$4fd565752dde8246b1e223575112d58b4d6acc77\$lut for cells of type $lut.
Using template $paramod$971d9f355db327680e1d04e8596be00cb67fa78c\$lut for cells of type $lut.
Using template $paramod$5a621b016c894274d07edef48c49b401a15fd796\$lut for cells of type $lut.
Using template $paramod$e0bde73e598487237493c8a43ca52c95a3727354\$lut for cells of type $lut.
Using template $paramod$ef55f89c74d994c27b4ec4bac79af43e8b1d7e25\$lut for cells of type $lut.
Using template $paramod$ceeb45bdd6c300a6df87f1c45b8348109858185a\$lut for cells of type $lut.
No more expansions possible.
<suppressed ~3806 debug messages>
Removed 0 unused cells and 2920 unused wires.

19.42. Executing AUTONAME pass.
Renamed 195 objects in module ALUControl (13 iterations).
Renamed 501 objects in module ForwardingUnit (14 iterations).
Renamed 95 objects in module adder (3 iterations).
Renamed 17875 objects in module alu (50 iterations).
Renamed 3 objects in module branch_decision (2 iterations).
Renamed 174 objects in module branch_predictor (5 iterations).
Renamed 16 objects in module control (4 iterations).
Renamed 3 objects in module cpu (2 iterations).
Renamed 8 objects in module csr_file (2 iterations).
Renamed 1111 objects in module data_mem (18 iterations).
Renamed 155 objects in module ex_mem (2 iterations).
Renamed 178 objects in module id_ex (2 iterations).
Renamed 64 objects in module if_id (2 iterations).
Renamed 166 objects in module imm_gen (13 iterations).
Renamed 639 objects in module instruction_memory (20 iterations).
Renamed 117 objects in module mem_wb (2 iterations).
Renamed 32 objects in module mux2to1 (2 iterations).
Renamed 32 objects in module program_counter (2 iterations).
Renamed 246 objects in module regfile (10 iterations).
Renamed 4 objects in module sign_mask_gen (2 iterations).
Renamed 1 objects in module top (2 iterations).
<suppressed ~2582 debug messages>

19.43. Executing HIERARCHY pass (managing design hierarchy).

19.43.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen

19.43.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \data_mem
Used module:     \instruction_memory
Used module:     \cpu
Used module:         \csr_file
Used module:         \program_counter
Used module:         \mux2to1
Used module:         \adder
Used module:         \ALUControl
Used module:         \alu
Used module:         \branch_decision
Used module:         \branch_predictor
Used module:         \control
Used module:         \ex_mem
Used module:         \ForwardingUnit
Used module:         \id_ex
Used module:         \if_id
Used module:         \imm_gen
Used module:         \mem_wb
Used module:         \regfile
Used module:         \sign_mask_gen
Removed 0 unused modules.

19.44. Printing statistics.

=== ALUControl ===

   Number of wires:                 20
   Number of wire bits:             80
   Number of public wires:          20
   Number of public wire bits:      80
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     SB_LUT4                        31

=== ForwardingUnit ===

   Number of wires:                 38
   Number of wire bits:            150
   Number of public wires:          38
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 60
     SB_LUT4                        60

=== adder ===

   Number of wires:                  4
   Number of wire bits:            128
   Number of public wires:           4
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 63
     SB_CARRY                       31
     SB_LUT4                        32

=== alu ===

   Number of wires:                257
   Number of wire bits:           1233
   Number of public wires:         257
   Number of public wire bits:    1233
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                724
     SB_CARRY                       95
     SB_LUT4                       629

=== branch_decision ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     SB_LUT4                         3

=== branch_predictor ===

   Number of wires:                 13
   Number of wire bits:            138
   Number of public wires:          13
   Number of public wire bits:     138
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 69
     SB_CARRY                       31
     SB_DFFE                         2
     SB_DFFN                         1
     SB_LUT4                        35

=== control ===

   Number of wires:                 14
   Number of wire bits:             21
   Number of public wires:          14
   Number of public wire bits:      21
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     SB_LUT4                        13

=== cpu ===

   Number of wires:                 72
   Number of wire bits:           1772
   Number of public wires:          72
   Number of public wire bits:    1772
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     ALUControl                      1
     ForwardingUnit                  1
     SB_LUT4                         3
     adder                           2
     alu                             1
     branch_decision                 1
     branch_predictor                1
     control                         1
     csr_file                        1
     ex_mem                          1
     id_ex                           1
     if_id                           1
     imm_gen                         1
     mem_wb                          1
     mux2to1                        24
     program_counter                 1
     regfile                         1
     sign_mask_gen                   1

=== csr_file ===

   Number of wires:                 14
   Number of wire bits:            218
   Number of public wires:          14
   Number of public wire bits:     218
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     SB_RAM40_4K                     8

=== data_mem ===

   Number of wires:                124
   Number of wire bits:            909
   Number of public wires:         124
   Number of public wire bits:     909
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                294
     SB_DFFE                        89
     SB_DFFESR                       2
     SB_DFFESS                       1
     SB_LUT4                       194
     SB_RAM40_4K                     8

=== ex_mem ===

   Number of wires:                  3
   Number of wire bits:            311
   Number of public wires:           3
   Number of public wire bits:     311
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     SB_DFF                        155

=== id_ex ===

   Number of wires:                  3
   Number of wire bits:            357
   Number of public wires:           3
   Number of public wire bits:     357
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_DFF                        178

=== if_id ===

   Number of wires:                  3
   Number of wire bits:            129
   Number of public wires:           3
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     SB_DFF                         64

=== imm_gen ===

   Number of wires:                 20
   Number of wire bits:            128
   Number of public wires:          20
   Number of public wire bits:     128
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     SB_LUT4                        52

=== instruction_memory ===

   Number of wires:               4141
   Number of wire bits:         131283
   Number of public wires:        4141
   Number of public wire bits:  131283
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     SB_LUT4                        98

=== mem_wb ===

   Number of wires:                  3
   Number of wire bits:            235
   Number of public wires:           3
   Number of public wire bits:     235
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     SB_DFF                        117

=== mux2to1 ===

   Number of wires:                  4
   Number of wire bits:             97
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_LUT4                        32

=== program_counter ===

   Number of wires:                  3
   Number of wire bits:             65
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     SB_DFF                         32

=== regfile ===

   Number of wires:                 24
   Number of wire bits:            253
   Number of public wires:          24
   Number of public wire bits:     253
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     SB_DFF                         48
     SB_LUT4                        81
     SB_RAM40_4K                     4

=== sign_mask_gen ===

   Number of wires:                  3
   Number of wire bits:             10
   Number of public wires:           3
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     SB_LUT4                         4

=== top ===

   Number of wires:                 14
   Number of wire bits:            179
   Number of public wires:          14
   Number of public wire bits:     179
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     SB_HFOSC                        1
     SB_LUT4                         1
     cpu                             1
     data_mem                        1
     instruction_memory              1

=== design hierarchy ===

   top                               1
     cpu                             1
       ALUControl                    1
       ForwardingUnit                1
       adder                         2
       alu                           1
       branch_decision               1
       branch_predictor              1
       control                       1
       csr_file                      1
       ex_mem                        1
       id_ex                         1
       if_id                         1
       imm_gen                       1
       mem_wb                        1
       mux2to1                      24
       program_counter               1
       regfile                       1
       sign_mask_gen                 1
     data_mem                        1
     instruction_memory              1

   Number of wires:               4880
   Number of wire bits:         140062
   Number of public wires:        4880
   Number of public wire bits:  140062
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2934
     SB_CARRY                      188
     SB_DFF                        594
     SB_DFFE                        91
     SB_DFFESR                       2
     SB_DFFESS                       1
     SB_DFFN                         1
     SB_HFOSC                        1
     SB_LUT4                      2036
     SB_RAM40_4K                    20

19.45. Executing CHECK pass (checking for obvious problems).
Checking module ALUControl...
Checking module ForwardingUnit...
Checking module adder...
Checking module alu...
Checking module branch_decision...
Checking module branch_predictor...
Checking module control...
Checking module cpu...
Checking module csr_file...
Checking module data_mem...
Checking module ex_mem...
Checking module id_ex...
Checking module if_id...
Checking module imm_gen...
Checking module instruction_memory...
Checking module mem_wb...
Checking module mux2to1...
Checking module program_counter...
Checking module regfile...
Checking module sign_mask_gen...
Checking module top...
Found and reported 0 problems.

19.46. Executing BLIF backend.

20. Executing JSON backend.

End of script. Logfile hash: 905b0b7d1b, CPU: user 10.06s system 0.13s, MEM: 180.80 MB peak
Yosys 0.17+9 (git sha1 3f8fb28cd, gcc 12.1.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)
Time spent: 20% 24x opt_clean (2 sec), 19% 31x opt_expr (2 sec), ...
